//
//  File generated by HDevelop for HALCON/DOTNET (C#) Version 12.0
//

using HalconDotNet;

public partial class HDevelopExport
{
#if !(NO_EXPORT_MAIN || NO_EXPORT_APP_MAIN)
  public HDevelopExport()
  {
    // Default settings used in HDevelop 
    HOperatorSet.SetSystem("width", 512);
    HOperatorSet.SetSystem("height", 512);
    if (HalconAPI.isWindows)
      HOperatorSet.SetSystem("use_window_thread","true");
    action();
  }
#endif

  // Procedures 
  // Local procedures 
  public void EnhanceEdgeArea4 (HObject ho_InputImage, out HObject ho_EnhancedImage, 
      out HObject ho_EnhancedEdge, HTuple hv_MeanMaskWidth, HTuple hv_MeanMaskHeight, 
      HTuple hv_FirstMinGray, HTuple hv_FirstMaxGray, HTuple hv_SortOrder, HTuple hv_EmpMaskWidth, 
      HTuple hv_EmpMaskHeight, HTuple hv_EmpMaskFactor, HTuple hv_LastMinGray, HTuple hv_LastMaxGray)
  {




    // Local iconic variables 

    HObject ho_Domain, ho_ImageMean, ho_Regions;
    HObject ho_ConnectedRegions1, ho_SelectedRegions2=null;
    HObject ho_SortedRegions=null, ho_ObjectSelected=null, ho_RegionFillUp;
    HObject ho_ImageReduced, ho_ImageScaleMax, ho_ImageMean2;
    HObject ho_ImageEmphasize, ho_Regions2, ho_ConnectedRegions;
    HObject ho_SelectedRegions=null, ho_RegionDifference;

    // Local control variables 

    HTuple hv_Width = null, hv_Height = null;
    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_EnhancedImage);
    HOperatorSet.GenEmptyObj(out ho_EnhancedEdge);
    HOperatorSet.GenEmptyObj(out ho_Domain);
    HOperatorSet.GenEmptyObj(out ho_ImageMean);
    HOperatorSet.GenEmptyObj(out ho_Regions);
    HOperatorSet.GenEmptyObj(out ho_ConnectedRegions1);
    HOperatorSet.GenEmptyObj(out ho_SelectedRegions2);
    HOperatorSet.GenEmptyObj(out ho_SortedRegions);
    HOperatorSet.GenEmptyObj(out ho_ObjectSelected);
    HOperatorSet.GenEmptyObj(out ho_RegionFillUp);
    HOperatorSet.GenEmptyObj(out ho_ImageReduced);
    HOperatorSet.GenEmptyObj(out ho_ImageScaleMax);
    HOperatorSet.GenEmptyObj(out ho_ImageMean2);
    HOperatorSet.GenEmptyObj(out ho_ImageEmphasize);
    HOperatorSet.GenEmptyObj(out ho_Regions2);
    HOperatorSet.GenEmptyObj(out ho_ConnectedRegions);
    HOperatorSet.GenEmptyObj(out ho_SelectedRegions);
    HOperatorSet.GenEmptyObj(out ho_RegionDifference);
    ho_Domain.Dispose();
    HOperatorSet.GetDomain(ho_InputImage, out ho_Domain);
    HOperatorSet.RegionFeatures(ho_Domain, "width", out hv_Width);
    HOperatorSet.RegionFeatures(ho_Domain, "height", out hv_Height);

    ho_ImageMean.Dispose();
    HOperatorSet.MeanImage(ho_InputImage, out ho_ImageMean, hv_MeanMaskWidth, hv_MeanMaskHeight);
    ho_Regions.Dispose();
    HOperatorSet.Threshold(ho_ImageMean, out ho_Regions, hv_FirstMinGray, hv_FirstMaxGray);
    ho_ConnectedRegions1.Dispose();
    HOperatorSet.Connection(ho_Regions, out ho_ConnectedRegions1);

    if ((int)(new HTuple(hv_MeanMaskWidth.TupleGreater(hv_MeanMaskHeight))) != 0)
    {
      ho_SelectedRegions2.Dispose();
      HOperatorSet.SelectShape(ho_ConnectedRegions1, out ho_SelectedRegions2, "width", 
          "and", hv_Width*0.9, hv_Width);
      ho_SortedRegions.Dispose();
      HOperatorSet.SortRegion(ho_SelectedRegions2, out ho_SortedRegions, "upper_left", 
          hv_SortOrder, "row");
      ho_ObjectSelected.Dispose();
      HOperatorSet.SelectObj(ho_SortedRegions, out ho_ObjectSelected, 1);
    }
    else
    {
      ho_SelectedRegions2.Dispose();
      HOperatorSet.SelectShape(ho_ConnectedRegions1, out ho_SelectedRegions2, "height", 
          "and", hv_Height*0.9, hv_Height);
      ho_SortedRegions.Dispose();
      HOperatorSet.SortRegion(ho_SelectedRegions2, out ho_SortedRegions, "upper_left", 
          hv_SortOrder, "column");
      ho_ObjectSelected.Dispose();
      HOperatorSet.SelectObj(ho_SortedRegions, out ho_ObjectSelected, 1);
    }

    ho_RegionFillUp.Dispose();
    HOperatorSet.FillUp(ho_ObjectSelected, out ho_RegionFillUp);

    ho_ImageReduced.Dispose();
    HOperatorSet.ReduceDomain(ho_ImageMean, ho_RegionFillUp, out ho_ImageReduced);
    ho_ImageScaleMax.Dispose();
    HOperatorSet.ScaleImageMax(ho_ImageReduced, out ho_ImageScaleMax);

    ho_ImageMean2.Dispose();
    HOperatorSet.MeanImage(ho_ImageScaleMax, out ho_ImageMean2, hv_MeanMaskWidth, 
        hv_MeanMaskHeight);
    ho_ImageEmphasize.Dispose();
    HOperatorSet.Emphasize(ho_ImageMean2, out ho_ImageEmphasize, hv_EmpMaskWidth, 
        hv_EmpMaskHeight, hv_EmpMaskFactor);

    ho_Regions2.Dispose();
    HOperatorSet.Threshold(ho_ImageEmphasize, out ho_Regions2, hv_LastMinGray, hv_LastMaxGray);
    ho_ConnectedRegions.Dispose();
    HOperatorSet.Connection(ho_Regions2, out ho_ConnectedRegions);

    if ((int)(new HTuple(hv_MeanMaskWidth.TupleGreater(hv_MeanMaskHeight))) != 0)
    {
      ho_SelectedRegions.Dispose();
      HOperatorSet.SelectShape(ho_ConnectedRegions, out ho_SelectedRegions, "width", 
          "and", hv_Width*0.1, hv_Width);
    }
    else
    {
      ho_SelectedRegions.Dispose();
      HOperatorSet.SelectShape(ho_ConnectedRegions, out ho_SelectedRegions, "height", 
          "and", hv_Height*0.1, hv_Height);
    }

    ho_EnhancedEdge.Dispose();
    HOperatorSet.MoveRegion(ho_SelectedRegions, out ho_EnhancedEdge, 0, 0);

    ho_EnhancedImage.Dispose();
    HOperatorSet.ChangeDomain(ho_ImageEmphasize, ho_Domain, out ho_EnhancedImage);

    ho_RegionDifference.Dispose();
    HOperatorSet.Difference(ho_Domain, ho_SelectedRegions, out ho_RegionDifference
        );

    HOperatorSet.OverpaintRegion(ho_EnhancedImage, ho_RegionDifference, 255, "fill");

    ho_Domain.Dispose();
    ho_ImageMean.Dispose();
    ho_Regions.Dispose();
    ho_ConnectedRegions1.Dispose();
    ho_SelectedRegions2.Dispose();
    ho_SortedRegions.Dispose();
    ho_ObjectSelected.Dispose();
    ho_RegionFillUp.Dispose();
    ho_ImageReduced.Dispose();
    ho_ImageScaleMax.Dispose();
    ho_ImageMean2.Dispose();
    ho_ImageEmphasize.Dispose();
    ho_Regions2.Dispose();
    ho_ConnectedRegions.Dispose();
    ho_SelectedRegions.Dispose();
    ho_RegionDifference.Dispose();

    return;
  }

#if !NO_EXPORT_MAIN
  // Main procedure 
  private void action()
  {


    // Local iconic variables 

    HObject ho_Image, ho_EnhancedImage, ho_EnhancedEdge;

    // Local control variables 

    HTuple hv_Width = null, hv_Height = null;
    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_Image);
    HOperatorSet.GenEmptyObj(out ho_EnhancedImage);
    HOperatorSet.GenEmptyObj(out ho_EnhancedEdge);
    if (HDevWindowStack.IsOpen())
    {
      HOperatorSet.SetDraw(HDevWindowStack.GetActive(), "margin");
    }


    ho_Image.Dispose();
    HOperatorSet.ReadImage(out ho_Image, "_EnhanceEdgeArea_B2_Ori2.jpg");
    HOperatorSet.GetImageSize(ho_Image, out hv_Width, out hv_Height);
    ho_EnhancedImage.Dispose();ho_EnhancedEdge.Dispose();
    EnhanceEdgeArea4(ho_Image, out ho_EnhancedImage, out ho_EnhancedEdge, 33, 1, 
        10, 90, "true", 55, 5, 20, 0, 15);

    ho_Image.Dispose();
    HOperatorSet.ReadImage(out ho_Image, "_EnhanceEdgeArea_B1_Ori2.jpg");
    HOperatorSet.GetImageSize(ho_Image, out hv_Width, out hv_Height);
    ho_EnhancedImage.Dispose();ho_EnhancedEdge.Dispose();
    EnhanceEdgeArea4(ho_Image, out ho_EnhancedImage, out ho_EnhancedEdge, 33, 1, 
        10, 90, "true", 33, 7, 15, 0, 15);

    ho_Image.Dispose();
    HOperatorSet.ReadImage(out ho_Image, "_EnhanceEdgeArea_B1_Ori.jpg");
    HOperatorSet.GetImageSize(ho_Image, out hv_Width, out hv_Height);
    ho_EnhancedImage.Dispose();ho_EnhancedEdge.Dispose();
    EnhanceEdgeArea4(ho_Image, out ho_EnhancedImage, out ho_EnhancedEdge, 33, 1, 
        10, 90, "true", 33, 7, 15, 0, 10);


    ho_Image.Dispose();
    HOperatorSet.ReadImage(out ho_Image, "_EnhanceEdgeArea_T2_Ori.jpg");
    HOperatorSet.GetImageSize(ho_Image, out hv_Width, out hv_Height);
    ho_EnhancedImage.Dispose();ho_EnhancedEdge.Dispose();
    EnhanceEdgeArea4(ho_Image, out ho_EnhancedImage, out ho_EnhancedEdge, 33, 1, 
        10, 90, "true", 33, 7, 15, 0, 10);


    ho_Image.Dispose();
    HOperatorSet.ReadImage(out ho_Image, "_EnhanceEdgeArea_L3_Ori.jpg");
    HOperatorSet.GetImageSize(ho_Image, out hv_Width, out hv_Height);
    ho_EnhancedImage.Dispose();ho_EnhancedEdge.Dispose();
    EnhanceEdgeArea4(ho_Image, out ho_EnhancedImage, out ho_EnhancedEdge, 1, 33, 
        40, 85, "true", 3, 33, 15, 0, 10);


    // stop(); only in hdevelop


    ho_Image.Dispose();
    ho_EnhancedImage.Dispose();
    ho_EnhancedEdge.Dispose();

  }

#endif


}
#if !(NO_EXPORT_MAIN || NO_EXPORT_APP_MAIN)
public class HDevelopExportApp
{
  static void Main(string[] args)
  {
    new HDevelopExport();
  }
}
#endif

