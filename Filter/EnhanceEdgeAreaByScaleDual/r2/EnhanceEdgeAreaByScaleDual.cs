//
//  File generated by HDevelop for HALCON/DOTNET (C#) Version 12.0
//

using HalconDotNet;

public partial class HDevelopExport
{
#if !(NO_EXPORT_MAIN || NO_EXPORT_APP_MAIN)
  public HDevelopExport()
  {
    // Default settings used in HDevelop 
    HOperatorSet.SetSystem("width", 512);
    HOperatorSet.SetSystem("height", 512);
    if (HalconAPI.isWindows)
      HOperatorSet.SetSystem("use_window_thread","true");
    action();
  }
#endif

  // Procedures 
  // Local procedures 
  public void EnhanceEdgeAreaByScaleDual (HObject ho_InputImage, out HObject ho_EnhancedImage, 
      out HObject ho_EnhancedEdge, HTuple hv_MeanMaskWidth, HTuple hv_MeanMaskHeight, 
      HTuple hv_EdgeAreaLightDark, HTuple hv_SelectAreaMin, HTuple hv_SelectAreaMax, 
      HTuple hv_EdgeLightDark, HTuple hv_ScaleAdd1, HTuple hv_EmpMaskWidth, HTuple hv_EmpMaskHeight, 
      HTuple hv_EmpFactor, HTuple hv_ScaleAdd2, HTuple hv_OpeningWidth, HTuple hv_OpeningHeight, 
      HTuple hv_ClosingWidth, HTuple hv_ClosingHeight)
  {




    // Local iconic variables 

    HObject ho_Domain, ho_ImageMean, ho_Region;
    HObject ho_ConnectedRegions, ho_SelectedRegions, ho_RegionUnion;
    HObject ho_RegionTrans, ho_ImageReduced, ho_Domain1, ho_ImageScaled=null;
    HObject ho_ImageScaleMax, ho_Region2, ho_ImageReduced1;
    HObject ho_ImageEmphasize, ho_ImageScaled2=null, ho_ImageScaleMax2;
    HObject ho_Region1, ho_RegionOpening, ho_RegionFillUp, ho_ImageNew;
    HObject ho_RegionComplement;

    // Local control variables 

    HTuple hv_Width = null, hv_Height = null, hv_UsedThreshold = null;
    HTuple hv_Value = null, hv_UsedThreshold2 = null, hv_UsedThreshold1 = null;
    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_EnhancedImage);
    HOperatorSet.GenEmptyObj(out ho_EnhancedEdge);
    HOperatorSet.GenEmptyObj(out ho_Domain);
    HOperatorSet.GenEmptyObj(out ho_ImageMean);
    HOperatorSet.GenEmptyObj(out ho_Region);
    HOperatorSet.GenEmptyObj(out ho_ConnectedRegions);
    HOperatorSet.GenEmptyObj(out ho_SelectedRegions);
    HOperatorSet.GenEmptyObj(out ho_RegionUnion);
    HOperatorSet.GenEmptyObj(out ho_RegionTrans);
    HOperatorSet.GenEmptyObj(out ho_ImageReduced);
    HOperatorSet.GenEmptyObj(out ho_Domain1);
    HOperatorSet.GenEmptyObj(out ho_ImageScaled);
    HOperatorSet.GenEmptyObj(out ho_ImageScaleMax);
    HOperatorSet.GenEmptyObj(out ho_Region2);
    HOperatorSet.GenEmptyObj(out ho_ImageReduced1);
    HOperatorSet.GenEmptyObj(out ho_ImageEmphasize);
    HOperatorSet.GenEmptyObj(out ho_ImageScaled2);
    HOperatorSet.GenEmptyObj(out ho_ImageScaleMax2);
    HOperatorSet.GenEmptyObj(out ho_Region1);
    HOperatorSet.GenEmptyObj(out ho_RegionOpening);
    HOperatorSet.GenEmptyObj(out ho_RegionFillUp);
    HOperatorSet.GenEmptyObj(out ho_ImageNew);
    HOperatorSet.GenEmptyObj(out ho_RegionComplement);
    ho_Domain.Dispose();
    HOperatorSet.GetDomain(ho_InputImage, out ho_Domain);
    HOperatorSet.RegionFeatures(ho_Domain, "width", out hv_Width);
    HOperatorSet.RegionFeatures(ho_Domain, "height", out hv_Height);

    ho_ImageMean.Dispose();
    HOperatorSet.MeanImage(ho_InputImage, out ho_ImageMean, hv_MeanMaskWidth, hv_MeanMaskHeight);

    ho_Region.Dispose();
    HOperatorSet.BinaryThreshold(ho_ImageMean, out ho_Region, "max_separability", 
        hv_EdgeAreaLightDark, out hv_UsedThreshold);

    ho_ConnectedRegions.Dispose();
    HOperatorSet.Connection(ho_Region, out ho_ConnectedRegions);
    ho_SelectedRegions.Dispose();
    HOperatorSet.SelectShape(ho_ConnectedRegions, out ho_SelectedRegions, "area", 
        "and", hv_SelectAreaMin, hv_SelectAreaMax);
    ho_RegionUnion.Dispose();
    HOperatorSet.Union1(ho_SelectedRegions, out ho_RegionUnion);
    ho_RegionTrans.Dispose();
    HOperatorSet.ShapeTrans(ho_RegionUnion, out ho_RegionTrans, "convex");
    ho_ImageReduced.Dispose();
    HOperatorSet.ReduceDomain(ho_ImageMean, ho_RegionTrans, out ho_ImageReduced);

    ho_Domain1.Dispose();
    HOperatorSet.GetDomain(ho_ImageReduced, out ho_Domain1);
    HOperatorSet.GrayFeatures(ho_Domain1, ho_ImageReduced, "mean", out hv_Value);
    if ((int)(new HTuple(hv_EdgeLightDark.TupleEqual("dark"))) != 0)
    {
      ho_ImageScaled.Dispose();
      HOperatorSet.ScaleImage(ho_ImageReduced, out ho_ImageScaled, 1, (255-hv_Value)+hv_ScaleAdd1);
    }
    else if ((int)(new HTuple(hv_EdgeLightDark.TupleEqual("light"))) != 0)
    {
      ho_ImageScaled.Dispose();
      HOperatorSet.ScaleImage(ho_ImageReduced, out ho_ImageScaled, 1, (-hv_Value)+hv_ScaleAdd1);
    }
    ho_ImageScaleMax.Dispose();
    HOperatorSet.ScaleImageMax(ho_ImageScaled, out ho_ImageScaleMax);

    ho_Region2.Dispose();
    HOperatorSet.BinaryThreshold(ho_ImageScaleMax, out ho_Region2, "max_separability", 
        hv_EdgeLightDark, out hv_UsedThreshold2);
    ho_ImageReduced1.Dispose();
    HOperatorSet.ReduceDomain(ho_ImageScaleMax, ho_Region2, out ho_ImageReduced1);

    ho_ImageEmphasize.Dispose();
    HOperatorSet.Emphasize(ho_ImageReduced1, out ho_ImageEmphasize, hv_EmpMaskWidth, 
        hv_EmpMaskHeight, hv_EmpFactor);

    HOperatorSet.GrayFeatures(ho_Region2, ho_ImageEmphasize, "mean", out hv_Value);
    if ((int)(new HTuple(hv_EdgeLightDark.TupleEqual("dark"))) != 0)
    {
      ho_ImageScaled2.Dispose();
      HOperatorSet.ScaleImage(ho_ImageEmphasize, out ho_ImageScaled2, 1, (255-hv_Value)+hv_ScaleAdd2);
    }
    else if ((int)(new HTuple(hv_EdgeLightDark.TupleEqual("light"))) != 0)
    {
      ho_ImageScaled2.Dispose();
      HOperatorSet.ScaleImage(ho_ImageEmphasize, out ho_ImageScaled2, 1, (-hv_Value)+hv_ScaleAdd2);
    }
    ho_ImageScaleMax2.Dispose();
    HOperatorSet.ScaleImageMax(ho_ImageScaled2, out ho_ImageScaleMax2);

    ho_Region1.Dispose();
    HOperatorSet.BinaryThreshold(ho_ImageScaleMax2, out ho_Region1, "max_separability", 
        hv_EdgeLightDark, out hv_UsedThreshold1);
    ho_RegionOpening.Dispose();
    HOperatorSet.OpeningRectangle1(ho_Region1, out ho_RegionOpening, hv_OpeningWidth, 
        hv_MeanMaskHeight);
    ho_EnhancedEdge.Dispose();
    HOperatorSet.ClosingRectangle1(ho_RegionOpening, out ho_EnhancedEdge, hv_ClosingWidth, 
        hv_ClosingHeight);
    ho_RegionFillUp.Dispose();
    HOperatorSet.FillUp(ho_EnhancedEdge, out ho_RegionFillUp);

    ho_ImageNew.Dispose();
    HOperatorSet.ChangeDomain(ho_InputImage, ho_Domain, out ho_ImageNew);
    ho_RegionComplement.Dispose();
    HOperatorSet.Complement(ho_RegionFillUp, out ho_RegionComplement);
    ho_EnhancedImage.Dispose();
    HOperatorSet.PaintRegion(ho_RegionFillUp, ho_ImageNew, out ho_EnhancedImage, 
        255, "fill");
    HOperatorSet.OverpaintRegion(ho_EnhancedImage, ho_RegionComplement, 0, "fill");

    ho_Domain.Dispose();
    ho_ImageMean.Dispose();
    ho_Region.Dispose();
    ho_ConnectedRegions.Dispose();
    ho_SelectedRegions.Dispose();
    ho_RegionUnion.Dispose();
    ho_RegionTrans.Dispose();
    ho_ImageReduced.Dispose();
    ho_Domain1.Dispose();
    ho_ImageScaled.Dispose();
    ho_ImageScaleMax.Dispose();
    ho_Region2.Dispose();
    ho_ImageReduced1.Dispose();
    ho_ImageEmphasize.Dispose();
    ho_ImageScaled2.Dispose();
    ho_ImageScaleMax2.Dispose();
    ho_Region1.Dispose();
    ho_RegionOpening.Dispose();
    ho_RegionFillUp.Dispose();
    ho_ImageNew.Dispose();
    ho_RegionComplement.Dispose();

    return;
  }

#if !NO_EXPORT_MAIN
  // Main procedure 
  private void action()
  {


    // Local iconic variables 

    HObject ho_Image, ho_EnhancedImage, ho_EnhancedEdge;

    // Local control variables 

    HTuple hv_Width = null, hv_Height = null;
    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_Image);
    HOperatorSet.GenEmptyObj(out ho_EnhancedImage);
    HOperatorSet.GenEmptyObj(out ho_EnhancedEdge);
    if (HDevWindowStack.IsOpen())
    {
      HOperatorSet.SetDraw(HDevWindowStack.GetActive(), "margin");
    }



    ho_Image.Dispose();
    HOperatorSet.ReadImage(out ho_Image, "2015-01-14_00.26.30_A_RightTop");
    HOperatorSet.GetImageSize(ho_Image, out hv_Width, out hv_Height);
    ho_EnhancedImage.Dispose();ho_EnhancedEdge.Dispose();
    EnhanceEdgeAreaByScaleDual(ho_Image, out ho_EnhancedImage, out ho_EnhancedEdge, 
        2, 55, "dark", 1000, 99999999, "dark", 0, 20, 20, 1, 0, 2, 55, 2, 55);

    ho_Image.Dispose();
    HOperatorSet.ReadImage(out ho_Image, "2015-01-14_00.47.04_A_Bottom_Right");
    HOperatorSet.GetImageSize(ho_Image, out hv_Width, out hv_Height);
    ho_EnhancedImage.Dispose();ho_EnhancedEdge.Dispose();
    EnhanceEdgeAreaByScaleDual(ho_Image, out ho_EnhancedImage, out ho_EnhancedEdge, 
        55, 2, "light", 1000, 99999999, "dark", 0, 20, 20, 1, -0, 55, 2, 55, 2);


    // stop(); only in hdevelop


    ho_Image.Dispose();
    ho_EnhancedImage.Dispose();
    ho_EnhancedEdge.Dispose();

  }

#endif


}
#if !(NO_EXPORT_MAIN || NO_EXPORT_APP_MAIN)
public class HDevelopExportApp
{
  static void Main(string[] args)
  {
    new HDevelopExport();
  }
}
#endif

