<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.0" halcon_version="11.0.3.4" cs="653733404">
<procedure name="main">
<interface/>
<body>
<c>*Calculate the distance of two paralle line</c>
<c>*=====================================</c>
<c></c>
<l>*read_image (Image, '../../../resource/sample/DistanceOfLineToLineFunc_sample_small.jpg')</l>
<l>read_image (Image, 'B:/2014-12-27_01.04.21_Bottom.tif')</l>
<l>*read_image (Image, '2014-12-18_19.04.43_LeftBottom.jpg')</l>
<l>*read_image (Image, '2014-12-25_20.52.15_BottomRight')</l>
<l>get_image_size (Image, Width, Height)</l>
<c></c>
<c></c>
<l>EnhanceEdgeArea3 (Image, EnhancedImage, 3, 3, 15, 7, 3, 2, 2.2, 0)</l>
<c></c>
<l>gray_opening_rect(EnhancedImage,ImageOpening, 1, 14)</l>
<l>*gray_dilation_rect(ImageOpening,ImageMax, 1, 1)</l>
<l>gray_closing_rect(ImageOpening,ImageClosing, 1, 14)</l>
<c></c>
<c></c>
<l>threshold(EnhancedImage,Region, 0, 100)</l>
<l>connection(Region, ConnectedRegions)</l>
<l>boundary(ConnectedRegions, RegionBorder1, 'inner')</l>
<c></c>
<c></c>
<c></c>
<c></c>
<l>gray_skeleton(EnhancedImage, GraySkeleton)</l>
<c></c>
<c></c>
<l>sobel_amp(EnhancedImage, EdgeAmplitude, 'sum_abs', 3)</l>
<l>boundary(EdgeAmplitude, RegionBorder, 'inner')</l>
<c></c>
<c></c>
<c></c>
<l>*median_separate(Image, ImageSMedian,1, 4, 'continued')</l>
<l>mean_image(Image, ImageMean, 1, 6)</l>
<l>emphasize (ImageMean, ImageEmphasize, 7, 3, 1) </l>
<c></c>
<l>mean_sp(Image, ImageMeanB, 3, 6,121,201)</l>
<l>emphasize (ImageMeanB, ImageEmphasizeB, 7, 3, 3) </l>
<c></c>
<l>*median_separate(ImageEmphasize, ImageSMedian,3, 5, 'continued')</l>
<l>mean_image(ImageEmphasize, ImageMean2, 2, 4)</l>
<l>*equ_histo_image(ImageMean2,equImageMean)</l>
<l>*smooth_image(ImageMean2,ImageSmooth, 'deriche2', 0.5)</l>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<l>stop()</l>
<c></c>
<c></c>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
<procedure name="DistanceOfLineToLine">
<interface>
<ic>
<par name="FirstLineStartPoint_Row"/>
<par name="FirstLineStartPoint_Column"/>
<par name="FirstLineEndPoint_Row"/>
<par name="FirstLineEndPoint_Column"/>
<par name="SecondLineStartPoint_Row"/>
<par name="SecondLineStartPoint_Column"/>
<par name="SecondLineEndPoint_Row"/>
<par name="SecondLineEndPoint_Column"/>
</ic>
<oc>
<par name="LineToLine_Distance"/>
<par name="DistanceStartPoint_Row"/>
<par name="DistanceStartPoint_Column"/>
<par name="DistanceEndPoint_Row"/>
<par name="DistanceEndPoint_Column"/>
<par name="DottedLinePoint_Row"/>
<par name="DottedLinePoint_Column"/>
<par name="LineToLineAngle"/>
</oc>
</interface>
<body>
<c>*center point</c>
<l>FirstLineCenterPoint_Row := 0.5*(FirstLineStartPoint_Row[0]+FirstLineEndPoint_Row[0])</l>
<l>FirstLineCenterPoint_Column := 0.5*(FirstLineStartPoint_Column[0]+FirstLineEndPoint_Column[0])</l>
<c></c>
<l>projection_pl (FirstLineCenterPoint_Row[0], FirstLineCenterPoint_Column[0],\
               SecondLineStartPoint_Row[0], SecondLineStartPoint_Column[0], SecondLineEndPoint_Row[0], SecondLineEndPoint_Column[0],\
               MiddleOfFirstLineToSecondLineRowProj, MiddleOfFirstLineToSecondLineColProj)</l>
<c></c>
<l>distance_pp (FirstLineCenterPoint_Row[0], FirstLineCenterPoint_Column[0],\
             MiddleOfFirstLineToSecondLineRowProj, MiddleOfFirstLineToSecondLineColProj, \
             LineToLine_Distance)</l>
<l>angle_ll (FirstLineStartPoint_Row[0], FirstLineStartPoint_Column[0], FirstLineEndPoint_Row[0], FirstLineEndPoint_Column[0],\
          SecondLineStartPoint_Row[0], SecondLineStartPoint_Column[0], SecondLineEndPoint_Row[0], SecondLineEndPoint_Column[0],\
          LineToLineAngle)</l>
<l>DistanceStartPoint_Row:=FirstLineCenterPoint_Row</l>
<l>DistanceStartPoint_Column:=FirstLineCenterPoint_Column</l>
<l>DistanceEndPoint_Row:=MiddleOfFirstLineToSecondLineRowProj</l>
<l>DistanceEndPoint_Column:=MiddleOfFirstLineToSecondLineColProj</l>
<c></c>
<l>if (SecondLineStartPoint_Column == SecondLineEndPoint_Column)</l>
<l>    if (SecondLineStartPoint_Row&lt;SecondLineEndPoint_Row)</l>
<l>        Max_Column := SecondLineEndPoint_Column</l>
<l>        Max_Column_Row := SecondLineEndPoint_Row</l>
<l>        Min_Column := SecondLineStartPoint_Column</l>
<l>        Min_Column_Row := SecondLineStartPoint_Row</l>
<l>    else</l>
<l>        Max_Column := SecondLineStartPoint_Column</l>
<l>        Max_Column_Row := SecondLineStartPoint_Row</l>
<l>        Min_Column := SecondLineEndPoint_Column</l>
<l>        Min_Column_Row := SecondLineEndPoint_Row</l>
<l>    endif</l>
<l>    if(MiddleOfFirstLineToSecondLineRowProj&lt;Min_Column_Row)</l>
<l>        DottedLinePoint_Row := Min_Column_Row</l>
<l>        DottedLinePoint_Column :=Min_Column</l>
<l>    elseif(MiddleOfFirstLineToSecondLineRowProj&gt;Max_Column_Row)</l>
<l>        DottedLinePoint_Row := Max_Column_Row</l>
<l>        DottedLinePoint_Column :=Max_Column</l>
<l>    else</l>
<l>        DottedLinePoint_Row := MiddleOfFirstLineToSecondLineRowProj</l>
<l>        DottedLinePoint_Column :=MiddleOfFirstLineToSecondLineColProj</l>
<l>    endif</l>
<l>else</l>
<l>    if (SecondLineStartPoint_Column&lt;SecondLineEndPoint_Column)</l>
<l>        Max_Column := SecondLineEndPoint_Column</l>
<l>        Max_Column_Row := SecondLineEndPoint_Row</l>
<l>        Min_Column := SecondLineStartPoint_Column</l>
<l>        Min_Column_Row := SecondLineStartPoint_Row</l>
<l>    else</l>
<l>        Max_Column := SecondLineStartPoint_Column</l>
<l>        Max_Column_Row := SecondLineStartPoint_Row</l>
<l>        Min_Column := SecondLineEndPoint_Column</l>
<l>        Min_Column_Row := SecondLineEndPoint_Row</l>
<l>    endif</l>
<l>    if(MiddleOfFirstLineToSecondLineColProj&lt;Min_Column)</l>
<l>        DottedLinePoint_Row := Min_Column_Row</l>
<l>        DottedLinePoint_Column :=Min_Column</l>
<l>    elseif(MiddleOfFirstLineToSecondLineColProj&gt;Max_Column)</l>
<l>        DottedLinePoint_Row := Max_Column_Row</l>
<l>        DottedLinePoint_Column :=Max_Column</l>
<l>    else</l>
<l>        DottedLinePoint_Row := MiddleOfFirstLineToSecondLineRowProj</l>
<l>        DottedLinePoint_Column :=MiddleOfFirstLineToSecondLineColProj</l>
<l>    endif</l>
<l>endif</l>
<l>return ()</l>
</body>
<docu id="DistanceOfLineToLine">
<parameters>
<parameter id="DistanceEndPoint_Column"/>
<parameter id="DistanceEndPoint_Row"/>
<parameter id="DistanceStartPoint_Column"/>
<parameter id="DistanceStartPoint_Row"/>
<parameter id="DottedLinePoint_Column"/>
<parameter id="DottedLinePoint_Row"/>
<parameter id="FirstLineEndPoint_Column"/>
<parameter id="FirstLineEndPoint_Row"/>
<parameter id="FirstLineStartPoint_Column"/>
<parameter id="FirstLineStartPoint_Row"/>
<parameter id="LineToLineAngle"/>
<parameter id="LineToLine_Distance"/>
<parameter id="SecondLineEndPoint_Column"/>
<parameter id="SecondLineEndPoint_Row"/>
<parameter id="SecondLineStartPoint_Column"/>
<parameter id="SecondLineStartPoint_Row"/>
</parameters>
</docu>
</procedure>
<procedure name="EnhanceEdgeArea3">
<interface>
<io>
<par name="InputImage"/>
</io>
<oo>
<par name="EnhancedImage"/>
</oo>
<ic>
<par name="EmpMaskWidth"/>
<par name="EmpMaskHeight"/>
<par name="EmpMaskFactor"/>
<par name="MeanMaskWidth"/>
<par name="MeanMaskHeight"/>
<par name="IterationCount"/>
<par name="ScaleMult"/>
<par name="ScaleAdd"/>
</ic>
</interface>
<body>
<c></c>
<l>mean_image(InputImage, EnhancedImage, 1, 1)</l>
<c></c>
<c></c>
<l>  for Index := 1 to IterationCount by 1</l>
<l>    mean_image(EnhancedImage, EnhancedImage, MeanMaskWidth, MeanMaskHeight)</l>
<l>    scale_image(EnhancedImage,ImageScaled, ScaleMult, ScaleAdd)</l>
<l>    emphasize (ImageScaled, EnhancedImage, EmpMaskWidth, EmpMaskHeight, EmpMaskFactor) </l>
<c>    </c>
<l>  endfor</l>
<c></c>
<l>if ( MeanMaskWidth &gt; MeanMaskHeight )</l>
<l>  gray_opening_rect(EnhancedImage,ImageOpening, 1, MeanMaskWidth*2)</l>
<l>  gray_closing_rect(ImageOpening,EnhancedImage, 1, MeanMaskWidth*2)</l>
<l>else</l>
<l>  gray_opening_rect(EnhancedImage,ImageOpening, MeanMaskHeight*2, 1)</l>
<l>  gray_closing_rect(ImageOpening,EnhancedImage, MeanMaskHeight*2, 1)</l>
<l>endif</l>
<c></c>
<c>      </c>
<c></c>
<l>  *mean_image(ImageEmp, EnhancedImage, MeanMaskWidth, MeanMaskHeight)</l>
<c>  </c>
<l>return ()</l>
</body>
<docu id="EnhanceEdgeArea3">
<parameters>
<parameter id="EmpMaskFactor"/>
<parameter id="EmpMaskHeight"/>
<parameter id="EmpMaskWidth"/>
<parameter id="EnhancedImage"/>
<parameter id="InputImage"/>
<parameter id="IterationCount"/>
<parameter id="MeanMaskHeight"/>
<parameter id="MeanMaskWidth"/>
<parameter id="ScaleAdd"/>
<parameter id="ScaleMult"/>
</parameters>
</docu>
</procedure>
</hdevelop>
