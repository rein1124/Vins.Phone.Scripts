//
//  File generated by HDevelop for HALCON/DOTNET (C#) Version 12.0
//

using HalconDotNet;

public partial class HDevelopExport
{
#if !(NO_EXPORT_MAIN || NO_EXPORT_APP_MAIN)
#endif

  // Procedures 
  public void GrayOpeningAndDilationFilter (HObject ho_Image, out HObject ho_EnhancedImage, 
      HTuple hv_GrayOpeningMaskHeight, HTuple hv_GrayOpeningMaskWidth, HTuple hv_GrayDilationMaskHeight, 
      HTuple hv_GrayDilationMaskWidth, HTuple hv_SubImageMult, HTuple hv_SubImageAdd)
  {




    // Local iconic variables 

    HObject ho_Domain, ho_ImageOpening=null, ho_ImageMax;

    // Local control variables 

    HTuple hv_DomainWidth = null, hv_DomainHeight = null;
    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_EnhancedImage);
    HOperatorSet.GenEmptyObj(out ho_Domain);
    HOperatorSet.GenEmptyObj(out ho_ImageOpening);
    HOperatorSet.GenEmptyObj(out ho_ImageMax);
    ho_Domain.Dispose();
    HOperatorSet.GetDomain(ho_Image, out ho_Domain);
    HOperatorSet.RegionFeatures(ho_Domain, "width", out hv_DomainWidth);
    HOperatorSet.RegionFeatures(ho_Domain, "height", out hv_DomainHeight);

    if ((int)(new HTuple(hv_GrayOpeningMaskHeight.TupleLessEqual(0))) != 0)
    {
      ho_ImageOpening.Dispose();
      HOperatorSet.GrayOpeningRect(ho_Image, out ho_ImageOpening, hv_DomainHeight, 
          hv_GrayOpeningMaskWidth);
    }
    else if ((int)(new HTuple(hv_GrayOpeningMaskWidth.TupleLessEqual(0))) != 0)
    {
      ho_ImageOpening.Dispose();
      HOperatorSet.GrayOpeningRect(ho_Image, out ho_ImageOpening, hv_GrayOpeningMaskHeight, 
          hv_DomainWidth);
    }
    else
    {
      ho_ImageOpening.Dispose();
      HOperatorSet.GrayOpeningRect(ho_Image, out ho_ImageOpening, hv_GrayOpeningMaskHeight, 
          hv_GrayOpeningMaskWidth);
    }


    ho_ImageMax.Dispose();
    HOperatorSet.GrayDilationRect(ho_ImageOpening, out ho_ImageMax, hv_GrayDilationMaskHeight, 
        hv_GrayDilationMaskWidth);

    ho_EnhancedImage.Dispose();
    HOperatorSet.SubImage(ho_Image, ho_ImageMax, out ho_EnhancedImage, hv_SubImageMult, 
        hv_SubImageAdd);

    ho_Domain.Dispose();
    ho_ImageOpening.Dispose();
    ho_ImageMax.Dispose();

    return;
  }


}
#if !(NO_EXPORT_MAIN || NO_EXPORT_APP_MAIN)
public class HDevelopExportApp
{
  static void Main(string[] args)
  {
    new HDevelopExport();
  }
}
#endif

