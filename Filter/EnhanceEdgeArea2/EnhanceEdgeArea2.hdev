<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.0" halcon_version="11.0.3.4" cs="649216931">
<procedure name="main">
<interface/>
<body>
<c>*Calculate the distance of two paralle line</c>
<c>*=====================================</c>
<c></c>
<l>*read_image (Image, '../../../resource/sample/DistanceOfLineToLineFunc_sample_small.jpg')</l>
<l>read_image (Image, 'D:/@/Vins.Phone/_Photos/Samsung S1404/2014-12-27, Measure test/01/2014-12-27_01.04.21.tif')</l>
<l>*read_image (Image, '2014-12-18_19.04.43_LeftBottom.jpg')</l>
<l>*read_image (Image, '2014-12-25_20.52.15_BottomRight')</l>
<l>get_image_size (Image, Width, Height)</l>
<c></c>
<l>mean_image(Image, ImageMean, 2, 7)</l>
<l>scale_image(ImageMean,ImageScaled, 2, 0)</l>
<l>emphasize (ImageScaled, ImageEmphasize1, 3, 3, 9)</l>
<c></c>
<l>mean_image(ImageEmphasize1, ImageMean2, 2, 7)</l>
<l>scale_image(ImageMean2,ImageScaled2, 1.5, 0)</l>
<l>emphasize (ImageScaled2, ImageEmphasize2, 3, 3, 9) </l>
<c></c>
<l>mean_image(ImageEmphasize2, ImageMean3, 2, 7)</l>
<l>scale_image(ImageMean3,ImageScaled3, 1.5, 0)</l>
<l>emphasize (ImageScaled3, ImageEmphasize3, 3, 3, 9) </l>
<c></c>
<l>mean_image(ImageEmphasize1, ImageMean2, 1, 6)</l>
<c></c>
<l>invert_image(ImageEmphasize1, ImageInvert)</l>
<c></c>
<l>sobel_amp(ImageInvert, EdgeAmplitude, 'sum_abs', 3)</l>
<c></c>
<c></c>
<l>*gray_opening_rect (ImageEmphasize1, ImageOpening4,  2 , 4)</l>
<c></c>
<l>*mean_sp(ImageOpening4, ImageMean2, 20, 3,60,255)</l>
<c></c>
<l>*gray_opening_rect (ImageMean2, ImageOpening5,  7, 3)</l>
<l>*gray_closing_rect (ImageMeanB, ImageOpening6,  10, 3)</l>
<c></c>
<c></c>
<l>LineStartPoint_Row := 172</l>
<l>LineStartPoint_Column := 176</l>
<l>LineEndPoint_Row := 450</l>
<l>LineEndPoint_Column := 180</l>
<l>RoiWidthLen := 50</l>
<l>FilterAlpha := 6</l>
<l>LowThreshold := 20</l>
<l>HighThreshold := 40</l>
<c>*first line</c>
<l>EnhanceEdgeArea2 (Image, EnhancedImage, LineStartPoint_Row, LineStartPoint_Column, LineEndPoint_Row, LineEndPoint_Column, RoiWidthLen, 7, 3, 1, 3, 7, 80, 200)</l>
<c></c>
<c></c>
<c></c>
<c></c>
<l>stop()</l>
<c></c>
<c></c>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
<procedure name="DistanceOfLineToLine">
<interface>
<ic>
<par name="FirstLineStartPoint_Row"/>
<par name="FirstLineStartPoint_Column"/>
<par name="FirstLineEndPoint_Row"/>
<par name="FirstLineEndPoint_Column"/>
<par name="SecondLineStartPoint_Row"/>
<par name="SecondLineStartPoint_Column"/>
<par name="SecondLineEndPoint_Row"/>
<par name="SecondLineEndPoint_Column"/>
</ic>
<oc>
<par name="LineToLine_Distance"/>
<par name="DistanceStartPoint_Row"/>
<par name="DistanceStartPoint_Column"/>
<par name="DistanceEndPoint_Row"/>
<par name="DistanceEndPoint_Column"/>
<par name="DottedLinePoint_Row"/>
<par name="DottedLinePoint_Column"/>
<par name="LineToLineAngle"/>
</oc>
</interface>
<body>
<c>*center point</c>
<l>FirstLineCenterPoint_Row := 0.5*(FirstLineStartPoint_Row[0]+FirstLineEndPoint_Row[0])</l>
<l>FirstLineCenterPoint_Column := 0.5*(FirstLineStartPoint_Column[0]+FirstLineEndPoint_Column[0])</l>
<c></c>
<l>projection_pl (FirstLineCenterPoint_Row[0], FirstLineCenterPoint_Column[0],\
               SecondLineStartPoint_Row[0], SecondLineStartPoint_Column[0], SecondLineEndPoint_Row[0], SecondLineEndPoint_Column[0],\
               MiddleOfFirstLineToSecondLineRowProj, MiddleOfFirstLineToSecondLineColProj)</l>
<c></c>
<l>distance_pp (FirstLineCenterPoint_Row[0], FirstLineCenterPoint_Column[0],\
             MiddleOfFirstLineToSecondLineRowProj, MiddleOfFirstLineToSecondLineColProj, \
             LineToLine_Distance)</l>
<l>angle_ll (FirstLineStartPoint_Row[0], FirstLineStartPoint_Column[0], FirstLineEndPoint_Row[0], FirstLineEndPoint_Column[0],\
          SecondLineStartPoint_Row[0], SecondLineStartPoint_Column[0], SecondLineEndPoint_Row[0], SecondLineEndPoint_Column[0],\
          LineToLineAngle)</l>
<l>DistanceStartPoint_Row:=FirstLineCenterPoint_Row</l>
<l>DistanceStartPoint_Column:=FirstLineCenterPoint_Column</l>
<l>DistanceEndPoint_Row:=MiddleOfFirstLineToSecondLineRowProj</l>
<l>DistanceEndPoint_Column:=MiddleOfFirstLineToSecondLineColProj</l>
<c></c>
<l>if (SecondLineStartPoint_Column == SecondLineEndPoint_Column)</l>
<l>    if (SecondLineStartPoint_Row&lt;SecondLineEndPoint_Row)</l>
<l>        Max_Column := SecondLineEndPoint_Column</l>
<l>        Max_Column_Row := SecondLineEndPoint_Row</l>
<l>        Min_Column := SecondLineStartPoint_Column</l>
<l>        Min_Column_Row := SecondLineStartPoint_Row</l>
<l>    else</l>
<l>        Max_Column := SecondLineStartPoint_Column</l>
<l>        Max_Column_Row := SecondLineStartPoint_Row</l>
<l>        Min_Column := SecondLineEndPoint_Column</l>
<l>        Min_Column_Row := SecondLineEndPoint_Row</l>
<l>    endif</l>
<l>    if(MiddleOfFirstLineToSecondLineRowProj&lt;Min_Column_Row)</l>
<l>        DottedLinePoint_Row := Min_Column_Row</l>
<l>        DottedLinePoint_Column :=Min_Column</l>
<l>    elseif(MiddleOfFirstLineToSecondLineRowProj&gt;Max_Column_Row)</l>
<l>        DottedLinePoint_Row := Max_Column_Row</l>
<l>        DottedLinePoint_Column :=Max_Column</l>
<l>    else</l>
<l>        DottedLinePoint_Row := MiddleOfFirstLineToSecondLineRowProj</l>
<l>        DottedLinePoint_Column :=MiddleOfFirstLineToSecondLineColProj</l>
<l>    endif</l>
<l>else</l>
<l>    if (SecondLineStartPoint_Column&lt;SecondLineEndPoint_Column)</l>
<l>        Max_Column := SecondLineEndPoint_Column</l>
<l>        Max_Column_Row := SecondLineEndPoint_Row</l>
<l>        Min_Column := SecondLineStartPoint_Column</l>
<l>        Min_Column_Row := SecondLineStartPoint_Row</l>
<l>    else</l>
<l>        Max_Column := SecondLineStartPoint_Column</l>
<l>        Max_Column_Row := SecondLineStartPoint_Row</l>
<l>        Min_Column := SecondLineEndPoint_Column</l>
<l>        Min_Column_Row := SecondLineEndPoint_Row</l>
<l>    endif</l>
<l>    if(MiddleOfFirstLineToSecondLineColProj&lt;Min_Column)</l>
<l>        DottedLinePoint_Row := Min_Column_Row</l>
<l>        DottedLinePoint_Column :=Min_Column</l>
<l>    elseif(MiddleOfFirstLineToSecondLineColProj&gt;Max_Column)</l>
<l>        DottedLinePoint_Row := Max_Column_Row</l>
<l>        DottedLinePoint_Column :=Max_Column</l>
<l>    else</l>
<l>        DottedLinePoint_Row := MiddleOfFirstLineToSecondLineRowProj</l>
<l>        DottedLinePoint_Column :=MiddleOfFirstLineToSecondLineColProj</l>
<l>    endif</l>
<l>endif</l>
<l>return ()</l>
</body>
<docu id="DistanceOfLineToLine">
<parameters>
<parameter id="DistanceEndPoint_Column"/>
<parameter id="DistanceEndPoint_Row"/>
<parameter id="DistanceStartPoint_Column"/>
<parameter id="DistanceStartPoint_Row"/>
<parameter id="DottedLinePoint_Column"/>
<parameter id="DottedLinePoint_Row"/>
<parameter id="FirstLineEndPoint_Column"/>
<parameter id="FirstLineEndPoint_Row"/>
<parameter id="FirstLineStartPoint_Column"/>
<parameter id="FirstLineStartPoint_Row"/>
<parameter id="LineToLineAngle"/>
<parameter id="LineToLine_Distance"/>
<parameter id="SecondLineEndPoint_Column"/>
<parameter id="SecondLineEndPoint_Row"/>
<parameter id="SecondLineStartPoint_Column"/>
<parameter id="SecondLineStartPoint_Row"/>
</parameters>
</docu>
</procedure>
<procedure name="EnhanceEdgeArea2">
<interface>
<io>
<par name="InputImage"/>
</io>
<oo>
<par name="EnhancedImage"/>
</oo>
<ic>
<par name="LineStartPoint_Row"/>
<par name="LineStartPoint_Column"/>
<par name="LineEndPoint_Row"/>
<par name="LineEndPoint_Column"/>
<par name="RoiWidthLen"/>
<par name="EmpMaskWidth"/>
<par name="EmpMaskHeight"/>
<par name="EmpMaskFactor"/>
<par name="MeanMaskWidth"/>
<par name="MeanMaskHeight"/>
<par name="MinThresh"/>
<par name="MaxThresh"/>
</ic>
</interface>
<body>
<c>* </c>
<c>* init</c>
<l>*FilterAlpha := 6</l>
<c>* Measure 01: Convert coordinates to rectangle2 type</c>
<l>TmpCtrl_Row := 0.5*(LineStartPoint_Row+LineEndPoint_Row)</l>
<l>TmpCtrl_Column := 0.5*(LineStartPoint_Column+LineEndPoint_Column)</l>
<l>TmpCtrl_Dr := LineStartPoint_Row-LineEndPoint_Row</l>
<l>TmpCtrl_Dc := LineEndPoint_Column-LineStartPoint_Column</l>
<l>TmpCtrl_Phi := atan2(TmpCtrl_Dr, TmpCtrl_Dc)</l>
<l>TmpCtrl_Len1 := 0.5*sqrt(TmpCtrl_Dr*TmpCtrl_Dr + TmpCtrl_Dc*TmpCtrl_Dc)</l>
<l>TmpCtrl_Len2 := RoiWidthLen</l>
<l>gen_rectangle2 (Rectangle, TmpCtrl_Row, TmpCtrl_Column, TmpCtrl_Phi, TmpCtrl_Len1, TmpCtrl_Len2)</l>
<c></c>
<l>dilation_rectangle1(Rectangle, RegionDilation, 20, 20)</l>
<c></c>
<l>reduce_domain (InputImage, RegionDilation, ReducedImage)</l>
<c></c>
<l>if(EmpMaskWidth &lt; EmpMaskHeight)</l>
<l>    gray_opening_rect (ReducedImage, ImageOpening, 3, 7)</l>
<l>else</l>
<l>    gray_opening_rect (ReducedImage, ImageOpening, 7, 3)</l>
<l>endif</l>
<c></c>
<l>emphasize (ImageOpening, EmphasizeImage, EmpMaskWidth, EmpMaskHeight, EmpMaskFactor) </l>
<c></c>
<l>if(EmpMaskWidth &lt; EmpMaskHeight)</l>
<l>    gray_opening_rect (EmphasizeImage, ImageOpening2, 3, 7)</l>
<l>else</l>
<l>    gray_opening_rect (EmphasizeImage, ImageOpening2, 7, 3)</l>
<l>endif</l>
<c></c>
<l>mean_sp(ImageOpening2, ImageMean, MeanMaskWidth, MeanMaskHeight, MinThresh, MaxThresh)</l>
<c></c>
<l>if(EmpMaskWidth &lt; EmpMaskHeight)</l>
<l>    gray_opening_rect (ImageMean, EnhancedImage, 3, 7)</l>
<l>else</l>
<l>    gray_opening_rect (ImageMean, EnhancedImage, 7, 3)</l>
<l>endif</l>
<c></c>
<c></c>
<l>return ()</l>
</body>
<docu id="EnhanceEdgeArea2">
<parameters>
<parameter id="EmpMaskFactor"/>
<parameter id="EmpMaskHeight"/>
<parameter id="EmpMaskWidth"/>
<parameter id="EnhancedImage"/>
<parameter id="InputImage"/>
<parameter id="LineEndPoint_Column"/>
<parameter id="LineEndPoint_Row"/>
<parameter id="LineStartPoint_Column"/>
<parameter id="LineStartPoint_Row"/>
<parameter id="MaxThresh"/>
<parameter id="MeanMaskHeight"/>
<parameter id="MeanMaskWidth"/>
<parameter id="MinThresh"/>
<parameter id="RoiWidthLen"/>
</parameters>
</docu>
</procedure>
<procedure name="EnhanceEdgeArea">
<interface>
<io>
<par name="InputImage"/>
</io>
<oo>
<par name="EnhancedImage"/>
</oo>
<ic>
<par name="LineStartPoint_Row"/>
<par name="LineStartPoint_Column"/>
<par name="LineEndPoint_Row"/>
<par name="LineEndPoint_Column"/>
<par name="RoiWidthLen"/>
<par name="EmpMaskWidth"/>
<par name="EmpMaskHeight"/>
<par name="EmpMaskFactor"/>
<par name="MeanMaskWidth"/>
<par name="MeanMaskHeight"/>
<par name="IterationCount"/>
<par name="MinGray"/>
<par name="MaxGray"/>
<par name="Grayval"/>
<par name="ClosingWidth"/>
<par name="ClosingHeight"/>
<par name="DilationRadius"/>
</ic>
</interface>
<body>
<c>* </c>
<c>* init</c>
<l>* FilterAlpha := 6</l>
<c>* Measure 01: Convert coordinates to rectangle2 type</c>
<l>TmpCtrl_Row := 0.5*(LineStartPoint_Row+LineEndPoint_Row)</l>
<l>TmpCtrl_Column := 0.5*(LineStartPoint_Column+LineEndPoint_Column)</l>
<l>TmpCtrl_Dr := LineStartPoint_Row-LineEndPoint_Row</l>
<l>TmpCtrl_Dc := LineEndPoint_Column-LineStartPoint_Column</l>
<l>TmpCtrl_Phi := atan2(TmpCtrl_Dr, TmpCtrl_Dc)</l>
<l>TmpCtrl_Len1 := 0.5*sqrt(TmpCtrl_Dr*TmpCtrl_Dr + TmpCtrl_Dc*TmpCtrl_Dc)</l>
<l>TmpCtrl_Len2 := RoiWidthLen</l>
<l>gen_rectangle2 (Rectangle, TmpCtrl_Row, TmpCtrl_Column, TmpCtrl_Phi, TmpCtrl_Len1, TmpCtrl_Len2)</l>
<c>* </c>
<l>dilation_rectangle1 (Rectangle, RegionDilation, 100, 100)</l>
<c>* </c>
<l>reduce_domain (InputImage, RegionDilation, EnhancedImage)</l>
<c>* </c>
<l>for Index := 1 to IterationCount by 1</l>
<l>    mean_image (EnhancedImage, MeanImage, MeanMaskWidth, MeanMaskHeight)</l>
<l>    emphasize (MeanImage, ImageEmphasize, EmpMaskWidth, EmpMaskHeight, EmpMaskFactor)</l>
<l>    mean_image (ImageEmphasize, EnhancedImage, 2, 2)</l>
<l>*     median_separate (ImageEmphasize, EnhancedImage, MeanMaskWidth, MeanMaskHeight, 'continued')</l>
<c>    * </c>
<l>endfor</l>
<c>* </c>
<c>* </c>
<l>fast_threshold (EnhancedImage, Seg, MinGray, MaxGray, 150)</l>
<l>connection (Seg, ConnectedRegions)</l>
<l>select_shape (ConnectedRegions, SelectedRegions, 'area', 'and', 1000, 9999999)</l>
<c>* opening_rectange1(SelectedRegions, RegionOpening, ClosingWidth, ClosingHeight)</c>
<l>closing_rectangle1 (SelectedRegions, RegionClosing, ClosingWidth, ClosingHeight)</l>
<c>* </c>
<l>boundary (RegionClosing, RegionBorder, 'inner')</l>
<l>dilation_circle (RegionClosing, RegionDilation, DilationRadius)</l>
<l>boundary (RegionDilation, RegionBorder2, 'inner')</l>
<c>* </c>
<c>* </c>
<l>paint_region (RegionDilation, EnhancedImage, EnhancedImage, Grayval, 'fill')</l>
<l>* region_to_bin (RegionDilation, EnhancedImage, 255, 0, 512, 512)</l>
<c>* </c>
<l>return ()</l>
</body>
<docu id="EnhanceEdgeArea">
<parameters>
<parameter id="ClosingHeight"/>
<parameter id="ClosingWidth"/>
<parameter id="DilationRadius"/>
<parameter id="EmpMaskFactor"/>
<parameter id="EmpMaskHeight"/>
<parameter id="EmpMaskWidth"/>
<parameter id="EnhancedImage"/>
<parameter id="Grayval"/>
<parameter id="InputImage"/>
<parameter id="IterationCount"/>
<parameter id="LineEndPoint_Column"/>
<parameter id="LineEndPoint_Row"/>
<parameter id="LineStartPoint_Column"/>
<parameter id="LineStartPoint_Row"/>
<parameter id="MaxGray"/>
<parameter id="MeanMaskHeight"/>
<parameter id="MeanMaskWidth"/>
<parameter id="MinGray"/>
<parameter id="RoiWidthLen"/>
</parameters>
</docu>
</procedure>
</hdevelop>
