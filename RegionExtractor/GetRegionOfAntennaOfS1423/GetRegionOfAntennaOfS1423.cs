//
//  File generated by HDevelop for HALCON/DOTNET (C#) Version 12.0
//

using HalconDotNet;

public partial class HDevelopExport
{
#if !(NO_EXPORT_MAIN || NO_EXPORT_APP_MAIN)
#endif

  // Procedures 
  public void GetRegionOfAntennaOfS1423 (HObject ho_Image, out HObject ho_FoundRegion, 
      HTuple hv_GrayOpeningMaskHeight, HTuple hv_GrayOpeningMaskWidth, HTuple hv_GrayDilationMaskHeight, 
      HTuple hv_GrayDilationMaskWidth, HTuple hv_LightDark, HTuple hv_AreaMin, HTuple hv_AreaMax, 
      HTuple hv_OpeningWidth, HTuple hv_OpeningHeight, HTuple hv_ClosingWidth, HTuple hv_ClosingHeight)
  {




    // Local iconic variables 

    HObject ho_Domain, ho_ImageOpening=null, ho_ImageMax;
    HObject ho_ImageSub, ho_Region1, ho_ConnectedRegions, ho_SelectedRegions;
    HObject ho_RegionOpening;

    // Local control variables 

    HTuple hv_DomainWidth = null, hv_DomainHeight = null;
    HTuple hv_UsedThreshold = null;
    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_FoundRegion);
    HOperatorSet.GenEmptyObj(out ho_Domain);
    HOperatorSet.GenEmptyObj(out ho_ImageOpening);
    HOperatorSet.GenEmptyObj(out ho_ImageMax);
    HOperatorSet.GenEmptyObj(out ho_ImageSub);
    HOperatorSet.GenEmptyObj(out ho_Region1);
    HOperatorSet.GenEmptyObj(out ho_ConnectedRegions);
    HOperatorSet.GenEmptyObj(out ho_SelectedRegions);
    HOperatorSet.GenEmptyObj(out ho_RegionOpening);
    ho_Domain.Dispose();
    HOperatorSet.GetDomain(ho_Image, out ho_Domain);
    HOperatorSet.RegionFeatures(ho_Domain, "width", out hv_DomainWidth);
    HOperatorSet.RegionFeatures(ho_Domain, "height", out hv_DomainHeight);

    if ((int)(new HTuple(hv_GrayOpeningMaskHeight.TupleLessEqual(0))) != 0)
    {
      ho_ImageOpening.Dispose();
      HOperatorSet.GrayOpeningRect(ho_Image, out ho_ImageOpening, hv_DomainHeight, 
          hv_GrayOpeningMaskWidth);
    }
    else if ((int)(new HTuple(hv_GrayOpeningMaskWidth.TupleLessEqual(0))) != 0)
    {
      ho_ImageOpening.Dispose();
      HOperatorSet.GrayOpeningRect(ho_Image, out ho_ImageOpening, hv_GrayOpeningMaskHeight, 
          hv_DomainWidth);
    }
    else
    {
      ho_ImageOpening.Dispose();
      HOperatorSet.GrayOpeningRect(ho_Image, out ho_ImageOpening, hv_GrayOpeningMaskHeight, 
          hv_GrayOpeningMaskWidth);
    }


    ho_ImageMax.Dispose();
    HOperatorSet.GrayDilationRect(ho_ImageOpening, out ho_ImageMax, hv_GrayDilationMaskHeight, 
        hv_GrayDilationMaskWidth);

    ho_ImageSub.Dispose();
    HOperatorSet.SubImage(ho_Image, ho_ImageMax, out ho_ImageSub, 1, 0);
    //scale_image_max (ImageSub, ImageScaleMax)
    ho_Region1.Dispose();
    HOperatorSet.BinaryThreshold(ho_ImageSub, out ho_Region1, "max_separability", 
        hv_LightDark, out hv_UsedThreshold);

    ho_ConnectedRegions.Dispose();
    HOperatorSet.Connection(ho_Region1, out ho_ConnectedRegions);
    ho_SelectedRegions.Dispose();
    HOperatorSet.SelectShape(ho_ConnectedRegions, out ho_SelectedRegions, "area", 
        "and", hv_AreaMin, hv_AreaMax);

    ho_RegionOpening.Dispose();
    HOperatorSet.OpeningRectangle1(ho_SelectedRegions, out ho_RegionOpening, hv_OpeningWidth, 
        hv_OpeningHeight);
    ho_FoundRegion.Dispose();
    HOperatorSet.ClosingRectangle1(ho_RegionOpening, out ho_FoundRegion, hv_ClosingWidth, 
        hv_ClosingHeight);

    ho_Domain.Dispose();
    ho_ImageOpening.Dispose();
    ho_ImageMax.Dispose();
    ho_ImageSub.Dispose();
    ho_Region1.Dispose();
    ho_ConnectedRegions.Dispose();
    ho_SelectedRegions.Dispose();
    ho_RegionOpening.Dispose();

    return;
  }


}
#if !(NO_EXPORT_MAIN || NO_EXPORT_APP_MAIN)
public class HDevelopExportApp
{
  static void Main(string[] args)
  {
    new HDevelopExport();
  }
}
#endif

