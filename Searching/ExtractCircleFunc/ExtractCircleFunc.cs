//
//  File generated by HDevelop for HALCON/DOTNET (C#) Version 11.0
//

using HalconDotNet;

public partial class HDevelopExport
{
#if !(NO_EXPORT_MAIN || NO_EXPORT_APP_MAIN)
#endif

  // Procedures 
  public void ExtractCircle (HObject ho_InputImage, HTuple hv_ROICirCentre_Row, HTuple hv_ROICirCentre_Column, 
      HTuple hv_ROIBigCirRadius, HTuple hv_ROISmallCirRadius, out HTuple hv_CirCentre_Row, 
      out HTuple hv_CirCentre_Column, out HTuple hv_CirRadius, out HTuple hv_CirRoundness)
  {



    // Stack for temporary objects 
    HObject[] OTemp = new HObject[20];

    // Local iconic variables 

    HObject ho_BigCircle, ho_SmallCircle, ho_RegionDifference;
    HObject ho_ImageReduced, ho_Edges, ho_ContoursSplit, ho_CircleEdge;
    HObject ho_Circles, ho_ObjectSelected=null, ho_Circles1;
    HObject ho_Circles2, ho_Region;


    // Local control variables 

    HTuple hv_Number = null, hv_I = null, hv_Type = new HTuple();
    HTuple hv_StartPhi = null, hv_EndPhi = null, hv_PointOrder = null;
    HTuple hv_Distance = null, hv_Sigma = null, hv_Sides = null;

    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_BigCircle);
    HOperatorSet.GenEmptyObj(out ho_SmallCircle);
    HOperatorSet.GenEmptyObj(out ho_RegionDifference);
    HOperatorSet.GenEmptyObj(out ho_ImageReduced);
    HOperatorSet.GenEmptyObj(out ho_Edges);
    HOperatorSet.GenEmptyObj(out ho_ContoursSplit);
    HOperatorSet.GenEmptyObj(out ho_CircleEdge);
    HOperatorSet.GenEmptyObj(out ho_Circles);
    HOperatorSet.GenEmptyObj(out ho_ObjectSelected);
    HOperatorSet.GenEmptyObj(out ho_Circles1);
    HOperatorSet.GenEmptyObj(out ho_Circles2);
    HOperatorSet.GenEmptyObj(out ho_Region);


    if (HDevWindowStack.IsOpen())
    {
      HOperatorSet.SetColor(HDevWindowStack.GetActive(), "red");
    }
    ho_BigCircle.Dispose();
    HOperatorSet.GenCircle(out ho_BigCircle, hv_ROICirCentre_Row, hv_ROICirCentre_Column, 
        hv_ROIBigCirRadius);

    if (HDevWindowStack.IsOpen())
    {
      HOperatorSet.SetColor(HDevWindowStack.GetActive(), "green");
    }
    ho_SmallCircle.Dispose();
    HOperatorSet.GenCircle(out ho_SmallCircle, hv_ROICirCentre_Row, hv_ROICirCentre_Column, 
        hv_ROISmallCirRadius);
    ho_RegionDifference.Dispose();
    HOperatorSet.Difference(ho_BigCircle, ho_SmallCircle, out ho_RegionDifference
        );
    ho_ImageReduced.Dispose();
    HOperatorSet.ReduceDomain(ho_InputImage, ho_RegionDifference, out ho_ImageReduced
        );

    ho_Edges.Dispose();
    HOperatorSet.EdgesSubPix(ho_ImageReduced, out ho_Edges, "lanser2", 0.5, 10, 40);
    ho_ContoursSplit.Dispose();
    HOperatorSet.SegmentContoursXld(ho_Edges, out ho_ContoursSplit, "lines_circles", 
        5, 4, 2);
    //???????
    ho_CircleEdge.Dispose();
    HOperatorSet.SelectContoursXld(ho_ContoursSplit, out ho_CircleEdge, "contour_length", 
        50, 99999999999999, 30, 99999999999999999999999);

    HOperatorSet.CountObj(ho_CircleEdge, out hv_Number);
    ho_Circles.Dispose();
    HOperatorSet.GenEmptyObj(out ho_Circles);
    HTuple end_val16 = hv_Number;
    HTuple step_val16 = 1;
    for (hv_I=1; hv_I.Continue(end_val16, step_val16); hv_I = hv_I.TupleAdd(step_val16))
    {
      ho_ObjectSelected.Dispose();
      HOperatorSet.SelectObj(ho_CircleEdge, out ho_ObjectSelected, hv_I);
      HOperatorSet.GetContourGlobalAttribXld(ho_ObjectSelected, "cont_approx", out hv_Type);
      if ((int)(new HTuple(hv_Type.TupleGreater(-1))) != 0)
      {
        HOperatorSet.ConcatObj(ho_Circles, ho_ObjectSelected, out OTemp[0]);
        ho_Circles.Dispose();
        ho_Circles = OTemp[0];
      }
    }
    if (HDevWindowStack.IsOpen())
    {
      HOperatorSet.ClearWindow(HDevWindowStack.GetActive());
    }
    if (HDevWindowStack.IsOpen())
    {
      HOperatorSet.DispObj(ho_ImageReduced, HDevWindowStack.GetActive());
    }
    //????
    ho_Circles1.Dispose();
    HOperatorSet.UnionCocircularContoursXld(ho_Circles, out ho_Circles1, 3, 300, 
        2, 100, 20, 20, "true", 1);
    //union_adjacent_contours_xld (UnionContours, UnionContours1, 33, 8, 'attr_keep')
    //segment_contours_xld (UnionContours1, LineSegments, 'lines_circles', 9, 22, 22)
    ho_CircleEdge.Dispose();
    HOperatorSet.SelectContoursXld(ho_Circles1, out ho_CircleEdge, "contour_length", 
        100, 99999999999999, 300, 99999999999999999999999);
    //??????
    HOperatorSet.FitCircleContourXld(ho_CircleEdge, "atukey", -1, 2, 0, 3, 2, out hv_CirCentre_Row, 
        out hv_CirCentre_Column, out hv_CirRadius, out hv_StartPhi, out hv_EndPhi, 
        out hv_PointOrder);
    //gen_ellipse_contour_xld (ContEllipse, Row, Column, StartPhi, Radius, Radius, StartPhi, EndPhi, PointOrder, 1.5)
    ho_Circles2.Dispose();
    HOperatorSet.GenCircleContourXld(out ho_Circles2, hv_CirCentre_Row, hv_CirCentre_Column, 
        hv_CirRadius, 0, 6.28318, "positive", 1);

    ho_Region.Dispose();
    HOperatorSet.GenRegionContourXld(ho_Circles2, out ho_Region, "filled");
    HOperatorSet.Roundness(ho_Region, out hv_Distance, out hv_Sigma, out hv_CirRoundness, 
        out hv_Sides);
    HDevelopStop();
    ho_BigCircle.Dispose();
    ho_SmallCircle.Dispose();
    ho_RegionDifference.Dispose();
    ho_ImageReduced.Dispose();
    ho_Edges.Dispose();
    ho_ContoursSplit.Dispose();
    ho_CircleEdge.Dispose();
    ho_Circles.Dispose();
    ho_ObjectSelected.Dispose();
    ho_Circles1.Dispose();
    ho_Circles2.Dispose();
    ho_Region.Dispose();

    return;
  }


}
#if !(NO_EXPORT_MAIN || NO_EXPORT_APP_MAIN)
public class HDevelopExportApp
{
  static void Main(string[] args)
  {
    new HDevelopExport();
  }
}
#endif

