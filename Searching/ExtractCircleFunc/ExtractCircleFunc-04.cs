//
//  File generated by HDevelop for HALCON/DOTNET (C#) Version 11.0
//

using HalconDotNet;

public partial class HDevelopExport
{
#if !(NO_EXPORT_MAIN || NO_EXPORT_APP_MAIN)
#endif

  // Procedures 
  public void ExtractCircle (HObject ho_InputImage, HTuple hv_ROICirCentre_Row, HTuple hv_ROICirCentre_Column, 
      HTuple hv_ROIBigCirRadius, HTuple hv_ROISmallCirRadius, out HTuple hv_CirCentre_Row, 
      out HTuple hv_CirCentre_Column, out HTuple hv_CirRadius, out HTuple hv_CirRoundness)
  {



    // Local iconic variables 

    HObject ho_BigCircle, ho_SmallCircle, ho_RegionDifference;
    HObject ho_ImageReduced, ho_Region, ho_ConnectedRegions;
    HObject ho_Circle2, ho_RegionClosing, ho_SelectedRegions;
    HObject ho_RegionUnion, ho_Contours, ho_Circles2;


    // Local control variables 

    HTuple hv_StartPhi = null, hv_EndPhi = null;
    HTuple hv_PointOrder = null;

    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_BigCircle);
    HOperatorSet.GenEmptyObj(out ho_SmallCircle);
    HOperatorSet.GenEmptyObj(out ho_RegionDifference);
    HOperatorSet.GenEmptyObj(out ho_ImageReduced);
    HOperatorSet.GenEmptyObj(out ho_Region);
    HOperatorSet.GenEmptyObj(out ho_ConnectedRegions);
    HOperatorSet.GenEmptyObj(out ho_Circle2);
    HOperatorSet.GenEmptyObj(out ho_RegionClosing);
    HOperatorSet.GenEmptyObj(out ho_SelectedRegions);
    HOperatorSet.GenEmptyObj(out ho_RegionUnion);
    HOperatorSet.GenEmptyObj(out ho_Contours);
    HOperatorSet.GenEmptyObj(out ho_Circles2);

    hv_CirRoundness = new HTuple();

    ho_BigCircle.Dispose();
    HOperatorSet.GenCircle(out ho_BigCircle, hv_ROICirCentre_Row, hv_ROICirCentre_Column, 
        hv_ROIBigCirRadius);
    if (HDevWindowStack.IsOpen())
    {
      HOperatorSet.SetColor(HDevWindowStack.GetActive(), "green");
    }
    ho_SmallCircle.Dispose();
    HOperatorSet.GenCircle(out ho_SmallCircle, hv_ROICirCentre_Row, hv_ROICirCentre_Column, 
        hv_ROISmallCirRadius);
    ho_RegionDifference.Dispose();
    HOperatorSet.Difference(ho_BigCircle, ho_SmallCircle, out ho_RegionDifference
        );
    ho_ImageReduced.Dispose();
    HOperatorSet.ReduceDomain(ho_InputImage, ho_RegionDifference, out ho_ImageReduced
        );
    ho_Region.Dispose();
    HOperatorSet.Threshold(ho_ImageReduced, out ho_Region, 128, 255);
    ho_ConnectedRegions.Dispose();
    HOperatorSet.Connection(ho_Region, out ho_ConnectedRegions);
    ho_Circle2.Dispose();
    HOperatorSet.GenCircle(out ho_Circle2, 200, 200, 3);
    ho_RegionClosing.Dispose();
    HOperatorSet.Closing(ho_ConnectedRegions, ho_Circle2, out ho_RegionClosing);
    ho_SelectedRegions.Dispose();
    HOperatorSet.SelectShape(ho_ConnectedRegions, out ho_SelectedRegions, "area", 
        "and", 150, 99999);
    ho_RegionUnion.Dispose();
    HOperatorSet.Union2(ho_SelectedRegions, ho_SmallCircle, out ho_RegionUnion);
    ho_Contours.Dispose();
    HOperatorSet.GenContourRegionXld(ho_RegionUnion, out ho_Contours, "border");
    HOperatorSet.FitCircleContourXld(ho_Contours, "atukey", -1, 2, 0, 3, 2, out hv_CirCentre_Row, 
        out hv_CirCentre_Column, out hv_CirRadius, out hv_StartPhi, out hv_EndPhi, 
        out hv_PointOrder);

    ho_Circles2.Dispose();
    HOperatorSet.GenCircleContourXld(out ho_Circles2, hv_CirCentre_Row, hv_CirCentre_Column, 
        hv_CirRadius, 0, 6.28318, "positive", 1);
    ho_BigCircle.Dispose();
    ho_SmallCircle.Dispose();
    ho_RegionDifference.Dispose();
    ho_ImageReduced.Dispose();
    ho_Region.Dispose();
    ho_ConnectedRegions.Dispose();
    ho_Circle2.Dispose();
    ho_RegionClosing.Dispose();
    ho_SelectedRegions.Dispose();
    ho_RegionUnion.Dispose();
    ho_Contours.Dispose();
    ho_Circles2.Dispose();

    return;
  }


}
#if !(NO_EXPORT_MAIN || NO_EXPORT_APP_MAIN)
public class HDevelopExportApp
{
  static void Main(string[] args)
  {
    new HDevelopExport();
  }
}
#endif

