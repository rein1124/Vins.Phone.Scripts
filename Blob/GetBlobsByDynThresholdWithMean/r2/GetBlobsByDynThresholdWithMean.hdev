<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.1" halcon_version="12.0">
<procedure name="main">
<interface/>
<body>
<l>dev_set_draw ('margin')</l>
<c></c>
<l>DynMeanMaskWidth:=200</l>
<l>DynMeanMaskHeight:=200</l>
<c></c>
<c>* Light</c>
<l>ZoomFactorLight:=0.5</l>
<l>MedianRadiusLight:=3</l>
<l>DynOffsetLight:=18</l>
<l>ClosingRadiusLight:=15</l>
<l>AreaMinLight:=100</l>
<l>AreaMaxLight:=99999999</l>
<l>Rect2Length1MinLight:=10</l>
<l>Rect2Length1MaxLight:=99999999</l>
<c></c>
<c>* Dark</c>
<l>ZoomFactorDark:=0.5</l>
<l>MedianRadiusDark:=1</l>
<l>DynOffsetDark:=25</l>
<l>ClosingRadiusDark:=5</l>
<l>AreaMinDark:=80</l>
<l>AreaMaxDark:=99999999</l>
<l>Rect2Length1MinDark:=10</l>
<l>Rect2Length1MaxDark:=99999999</l>
<c></c>
<c>* Middle-5c</c>
<l>read_image (Image5c, 'SurfaceDefinition_C_General_Include_C-Middle-5c.Domain.Crop')</l>
<l>GetBlobsByDynThresholdWithMean (Image5c, FoundRegion5cLight, ZoomFactorLight, MedianRadiusLight, DynMeanMaskWidth, DynMeanMaskHeight, DynOffsetLight, 'dark', ClosingRadiusLight, AreaMinLight, AreaMaxLight, Rect2Length1MinLight, Rect2Length1MaxLight)</l>
<l>GetBlobsByDynThresholdWithMean (Image5c, FoundRegion5cDark, ZoomFactorDark, MedianRadiusDark, DynMeanMaskWidth, DynMeanMaskHeight, DynOffsetDark, 'dark', ClosingRadiusDark, AreaMinDark, AreaMaxDark, Rect2Length1MinDark, Rect2Length1MaxDark)</l>
<l>union2 (FoundRegion5cLight, FoundRegion5cDark, RegionUnion5c)</l>
<l>union1 (RegionUnion5c, RegionUnion5c)</l>
<c></c>
<c>* Middle-5a</c>
<l>read_image (Image5a, 'SurfaceDefinition_C_General_Include_C-Middle-5a.Domain.Crop')</l>
<l>GetBlobsByDynThresholdWithMean (Image5a, FoundRegion5aLight, ZoomFactorLight, MedianRadiusLight, DynMeanMaskWidth, DynMeanMaskHeight, DynOffsetLight, 'dark', ClosingRadiusLight, AreaMinLight, AreaMaxLight, Rect2Length1MinLight, Rect2Length1MaxLight)</l>
<l>GetBlobsByDynThresholdWithMean (Image5a, FoundRegion5aDark, ZoomFactorDark, MedianRadiusDark, DynMeanMaskWidth, DynMeanMaskHeight, DynOffsetDark, 'dark', ClosingRadiusDark, AreaMinDark, AreaMaxDark, Rect2Length1MinDark, Rect2Length1MaxDark)</l>
<l>union2 (FoundRegion5aLight, FoundRegion5aDark, RegionUnion5a)</l>
<l>union1 (RegionUnion5a, RegionUnion5a)</l>
<c></c>
<c>* Middle-4</c>
<l>read_image (Image4, 'SurfaceDefinition_C_General_Include_C-Middle-4.Domain.Crop')</l>
<l>GetBlobsByDynThresholdWithMean (Image4, FoundRegion4Light, ZoomFactorLight, MedianRadiusLight, DynMeanMaskWidth, DynMeanMaskHeight, DynOffsetLight, 'dark', ClosingRadiusLight, AreaMinLight, AreaMaxLight, Rect2Length1MinLight, Rect2Length1MaxLight)</l>
<l>GetBlobsByDynThresholdWithMean (Image4, FoundRegion4Dark, ZoomFactorDark, MedianRadiusDark, DynMeanMaskWidth, DynMeanMaskHeight, DynOffsetDark, 'dark', ClosingRadiusDark, AreaMinDark, AreaMaxDark, Rect2Length1MinDark, Rect2Length1MaxDark)</l>
<l>union2 (FoundRegion4Light, FoundRegion4Dark, RegionUnion4)</l>
<l>union1 (RegionUnion4, RegionUnion4)</l>
<c></c>
<c>* Middle-1</c>
<l>read_image (Image1, 'SurfaceDefinition_C_General_Include_C-Middle-1.Domain.Crop')</l>
<l>GetBlobsByDynThresholdWithMean (Image1, FoundRegion1Light, ZoomFactorLight, MedianRadiusLight, DynMeanMaskWidth, DynMeanMaskHeight, DynOffsetLight, 'dark', ClosingRadiusLight, AreaMinLight, AreaMaxLight, Rect2Length1MinLight, Rect2Length1MaxLight)</l>
<l>GetBlobsByDynThresholdWithMean (Image1, FoundRegion1Dark, ZoomFactorDark, MedianRadiusDark, DynMeanMaskWidth, DynMeanMaskHeight, DynOffsetDark, 'dark', ClosingRadiusDark, AreaMinDark, AreaMaxDark, Rect2Length1MinDark, Rect2Length1MaxDark)</l>
<l>union2 (FoundRegion1Light, FoundRegion1Dark, RegionUnion1)</l>
<l>union1 (RegionUnion1, RegionUnion1)</l>
<c></c>
<c>* Middle-2b</c>
<l>read_image (Image2b, 'SurfaceDefinition_C_General_Include_C-Middle-2b.Domain.Crop')</l>
<l>GetBlobsByDynThresholdWithMean (Image2b, FoundRegion2bLight, ZoomFactorLight, MedianRadiusLight, DynMeanMaskWidth, DynMeanMaskHeight, DynOffsetLight, 'dark', ClosingRadiusLight, AreaMinLight, AreaMaxLight, Rect2Length1MinLight, Rect2Length1MaxLight)</l>
<l>GetBlobsByDynThresholdWithMean (Image2b, FoundRegion2bDark, ZoomFactorDark, MedianRadiusDark, DynMeanMaskWidth, DynMeanMaskHeight, DynOffsetDark, 'dark', ClosingRadiusDark, AreaMinDark, AreaMaxDark, Rect2Length1MinDark, Rect2Length1MaxDark)</l>
<l>union2 (FoundRegion2bLight, FoundRegion2bDark, RegionUnion2b)</l>
<l>union1 (RegionUnion2b, RegionUnion2b)</l>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
<procedure name="GetBlobsByDynThresholdWithMean">
<interface>
<io>
<par name="Image" base_type="iconic" dimension="0"/>
</io>
<oo>
<par name="FoundRegion" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="ZoomFactor" base_type="ctrl" dimension="0"/>
<par name="MedianRadius" base_type="ctrl" dimension="0"/>
<par name="DynMeanMaskWidth" base_type="ctrl" dimension="0"/>
<par name="DynMeanMaskHeight" base_type="ctrl" dimension="0"/>
<par name="DynOffset" base_type="ctrl" dimension="0"/>
<par name="DynLightDark" base_type="ctrl" dimension="0"/>
<par name="ClosingRadius" base_type="ctrl" dimension="0"/>
<par name="AreaMin" base_type="ctrl" dimension="0"/>
<par name="AreaMax" base_type="ctrl" dimension="0"/>
<par name="Rect2Length1Min" base_type="ctrl" dimension="0"/>
<par name="Rect2Length1Max" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<l>zoom_image_factor (Image, ImageZoomed, ZoomFactor, ZoomFactor, 'nearest_neighbor')</l>
<l>get_domain (ImageZoomed, DomainZoomed)</l>
<l>region_features (DomainZoomed, 'width', ZoomWidth)</l>
<l>region_features (DomainZoomed, 'height', ZoomHeight)</l>
<c></c>
<l>MedianRadiusZoomed := MedianRadius * ZoomFactor</l>
<l>ClosingRediusZoomed := ClosingRadius * ZoomFactor</l>
<l>AreaMinZoomed := AreaMin * ZoomFactor * ZoomFactor</l>
<l>AreaMaxZoomed := AreaMax * ZoomFactor * ZoomFactor</l>
<l>Rect2Length1MinZoomed := Rect2Length1Min * ZoomFactor</l>
<l>Rect2Length1MaxZoomed := Rect2Length1Max * ZoomFactor</l>
<c></c>
<l>median_image (ImageZoomed, ImageMedian, 'circle', MedianRadiusZoomed, 'mirrored')</l>
<c></c>
<l>gray_features (DomainZoomed, ImageMedian, 'mean', Value)</l>
<c></c>
<l>if (DynMeanMaskWidth &gt; 0)</l>
<l>    MeanWidth := DynMeanMaskWidth * ZoomFactor</l>
<l>else</l>
<l>    MeanWidth := ZoomWidth</l>
<l>endif</l>
<c></c>
<l>if (DynMeanMaskHeight &gt; 0)</l>
<l>    MeanHeight := DynMeanMaskHeight * ZoomFactor</l>
<l>else</l>
<l>    MeanHeight := ZoomHeight</l>
<l>endif</l>
<c></c>
<l>mean_image (ImageMedian, ImageMean, MeanWidth, MeanHeight)</l>
<c></c>
<l>dyn_threshold (ImageMedian, ImageMean, RegionDynThresh2, DynOffset, DynLightDark)</l>
<c></c>
<l>closing_circle (RegionDynThresh2, RegionClosing2, ClosingRediusZoomed)</l>
<l>connection (RegionClosing2, ConnectedRegions2)</l>
<l>select_shape (ConnectedRegions2, SelectedRegions2, ['area','rect2_len1'], 'or', [AreaMinZoomed,Rect2Length1MinZoomed], [AreaMaxZoomed,Rect2Length1MaxZoomed])</l>
<c></c>
<l>zoom_region (SelectedRegions2, RegionZoom, 1/ZoomFactor, 1/ZoomFactor)</l>
<l>move_region (RegionZoom, FoundRegion, 0, 0)</l>
<c></c>
<l>return ()</l>
</body>
<docu id="GetBlobsByDynThresholdWithMean">
<parameters>
<parameter id="AreaMax"/>
<parameter id="AreaMin"/>
<parameter id="ClosingRadius"/>
<parameter id="DynLightDark">
<default_type>string</default_type>
<sem_type>string</sem_type>
<type_list>
<item>string</item>
</type_list>
</parameter>
<parameter id="DynMeanMaskHeight">
<default_type>integer</default_type>
<sem_type>extent.y</sem_type>
<type_list>
<item>integer</item>
</type_list>
</parameter>
<parameter id="DynMeanMaskWidth">
<default_type>integer</default_type>
<sem_type>extent.x</sem_type>
<type_list>
<item>integer</item>
</type_list>
</parameter>
<parameter id="DynOffset">
<default_type>real</default_type>
<sem_type>number</sem_type>
<type_list>
<item>real</item>
</type_list>
</parameter>
<parameter id="FoundRegion">
<multivalue>true</multivalue>
<sem_type>region</sem_type>
</parameter>
<parameter id="Image">
<sem_type>image</sem_type>
<type_list>
<item>byte</item>
</type_list>
</parameter>
<parameter id="MedianRadius"/>
<parameter id="Rect2Length1Max"/>
<parameter id="Rect2Length1Min"/>
<parameter id="ZoomFactor">
<default_type>real</default_type>
<sem_type>real</sem_type>
<type_list>
<item>real</item>
</type_list>
</parameter>
</parameters>
</docu>
</procedure>
</hdevelop>
