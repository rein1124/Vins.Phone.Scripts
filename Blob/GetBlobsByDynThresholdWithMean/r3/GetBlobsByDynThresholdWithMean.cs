//
//  File generated by HDevelop for HALCON/DOTNET (C#) Version 12.0
//

using HalconDotNet;

public partial class HDevelopExport
{
#if !(NO_EXPORT_MAIN || NO_EXPORT_APP_MAIN)
#endif

  // Procedures 
  public void GetBlobsByDynThresholdWithMean (HObject ho_Image, out HObject ho_FoundRegion, 
      HTuple hv_ZoomFactor, HTuple hv_MedianRadius, HTuple hv_DynMeanMaskWidth, HTuple hv_DynMeanMaskHeight, 
      HTuple hv_DynOffset, HTuple hv_DynLightDark, HTuple hv_ClosingRadius, HTuple hv_AreaMin, 
      HTuple hv_AreaMax, HTuple hv_Rect2Length1Min, HTuple hv_Rect2Length1Max)
  {




    // Local iconic variables 

    HObject ho_ImageZoomed, ho_DomainZoomed, ho_ImageMedian;
    HObject ho_ImageMean, ho_RegionDynThresh2, ho_RegionClosing2;
    HObject ho_ConnectedRegions2, ho_SelectedRegions2, ho_RegionZoom;

    // Local control variables 

    HTuple hv_ZoomWidth = null, hv_ZoomHeight = null;
    HTuple hv_MedianRadiusZoomed = null, hv_ClosingRediusZoomed = null;
    HTuple hv_AreaMinZoomed = null, hv_AreaMaxZoomed = null;
    HTuple hv_Rect2Length1MinZoomed = null, hv_Rect2Length1MaxZoomed = null;
    HTuple hv_Value = null, hv_MeanWidth = new HTuple(), hv_MeanHeight = new HTuple();
    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_FoundRegion);
    HOperatorSet.GenEmptyObj(out ho_ImageZoomed);
    HOperatorSet.GenEmptyObj(out ho_DomainZoomed);
    HOperatorSet.GenEmptyObj(out ho_ImageMedian);
    HOperatorSet.GenEmptyObj(out ho_ImageMean);
    HOperatorSet.GenEmptyObj(out ho_RegionDynThresh2);
    HOperatorSet.GenEmptyObj(out ho_RegionClosing2);
    HOperatorSet.GenEmptyObj(out ho_ConnectedRegions2);
    HOperatorSet.GenEmptyObj(out ho_SelectedRegions2);
    HOperatorSet.GenEmptyObj(out ho_RegionZoom);
    ho_ImageZoomed.Dispose();
    HOperatorSet.ZoomImageFactor(ho_Image, out ho_ImageZoomed, hv_ZoomFactor, hv_ZoomFactor, 
        "nearest_neighbor");
    ho_DomainZoomed.Dispose();
    HOperatorSet.GetDomain(ho_ImageZoomed, out ho_DomainZoomed);
    HOperatorSet.RegionFeatures(ho_DomainZoomed, "width", out hv_ZoomWidth);
    HOperatorSet.RegionFeatures(ho_DomainZoomed, "height", out hv_ZoomHeight);

    hv_MedianRadiusZoomed = hv_MedianRadius*hv_ZoomFactor;
    hv_ClosingRediusZoomed = hv_ClosingRadius*hv_ZoomFactor;
    hv_AreaMinZoomed = (hv_AreaMin*hv_ZoomFactor)*hv_ZoomFactor;
    hv_AreaMaxZoomed = (hv_AreaMax*hv_ZoomFactor)*hv_ZoomFactor;
    hv_Rect2Length1MinZoomed = hv_Rect2Length1Min*hv_ZoomFactor;
    hv_Rect2Length1MaxZoomed = hv_Rect2Length1Max*hv_ZoomFactor;

    ho_ImageMedian.Dispose();
    HOperatorSet.MedianImage(ho_ImageZoomed, out ho_ImageMedian, "circle", hv_MedianRadiusZoomed, 
        "mirrored");

    HOperatorSet.GrayFeatures(ho_DomainZoomed, ho_ImageMedian, "mean", out hv_Value);

    if ((int)(new HTuple(hv_DynMeanMaskWidth.TupleGreater(0))) != 0)
    {
      hv_MeanWidth = hv_DynMeanMaskWidth*hv_ZoomFactor;
    }
    else
    {
      hv_MeanWidth = hv_ZoomWidth.Clone();
    }

    if ((int)(new HTuple(hv_DynMeanMaskHeight.TupleGreater(0))) != 0)
    {
      hv_MeanHeight = hv_DynMeanMaskHeight*hv_ZoomFactor;
    }
    else
    {
      hv_MeanHeight = hv_ZoomHeight.Clone();
    }

    ho_ImageMean.Dispose();
    HOperatorSet.MeanImage(ho_ImageMedian, out ho_ImageMean, hv_MeanWidth, hv_MeanHeight);

    ho_RegionDynThresh2.Dispose();
    HOperatorSet.DynThreshold(ho_ImageMedian, ho_ImageMean, out ho_RegionDynThresh2, 
        hv_DynOffset, hv_DynLightDark);

    ho_RegionClosing2.Dispose();
    HOperatorSet.ClosingCircle(ho_RegionDynThresh2, out ho_RegionClosing2, hv_ClosingRediusZoomed);
    ho_ConnectedRegions2.Dispose();
    HOperatorSet.Connection(ho_RegionClosing2, out ho_ConnectedRegions2);
    ho_SelectedRegions2.Dispose();
    HOperatorSet.SelectShape(ho_ConnectedRegions2, out ho_SelectedRegions2, (new HTuple("area")).TupleConcat(
        "rect2_len1"), "or", hv_AreaMinZoomed.TupleConcat(hv_Rect2Length1MinZoomed), 
        hv_AreaMaxZoomed.TupleConcat(hv_Rect2Length1MaxZoomed));

    ho_RegionZoom.Dispose();
    HOperatorSet.ZoomRegion(ho_SelectedRegions2, out ho_RegionZoom, 1/hv_ZoomFactor, 
        1/hv_ZoomFactor);
    ho_FoundRegion.Dispose();
    HOperatorSet.MoveRegion(ho_RegionZoom, out ho_FoundRegion, 0, 0);

    ho_ImageZoomed.Dispose();
    ho_DomainZoomed.Dispose();
    ho_ImageMedian.Dispose();
    ho_ImageMean.Dispose();
    ho_RegionDynThresh2.Dispose();
    ho_RegionClosing2.Dispose();
    ho_ConnectedRegions2.Dispose();
    ho_SelectedRegions2.Dispose();
    ho_RegionZoom.Dispose();

    return;
  }


}
#if !(NO_EXPORT_MAIN || NO_EXPORT_APP_MAIN)
public class HDevelopExportApp
{
  static void Main(string[] args)
  {
    new HDevelopExport();
  }
}
#endif

