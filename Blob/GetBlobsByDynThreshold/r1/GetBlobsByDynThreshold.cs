//
//  File generated by HDevelop for HALCON/DOTNET (C#) Version 12.0
//

using HalconDotNet;

public partial class HDevelopExport
{
#if !(NO_EXPORT_MAIN || NO_EXPORT_APP_MAIN)
#endif

  // Procedures 
  public void GetBlobsByDynThreshold (HObject ho_Image, out HObject ho_FoundRegion, 
      HTuple hv_MedianRadius, HTuple hv_MeanSpMaskWidth, HTuple hv_MeanSpMaskHeight, 
      HTuple hv_MeanSpMinThreshold, HTuple hv_MeanSpMaxThreshold, HTuple hv_DynOffset, 
      HTuple hv_DynLightDark)
  {




    // Local iconic variables 

    HObject ho_ImageMedian=null, ho_ImageSPMean=null;
    HObject ho_RegionDynThresh2=null, ho_ConnectedRegions;
    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_FoundRegion);
    HOperatorSet.GenEmptyObj(out ho_ImageMedian);
    HOperatorSet.GenEmptyObj(out ho_ImageSPMean);
    HOperatorSet.GenEmptyObj(out ho_RegionDynThresh2);
    HOperatorSet.GenEmptyObj(out ho_ConnectedRegions);
    if ((int)(new HTuple(hv_MedianRadius.TupleGreater(0))) != 0)
    {
      ho_ImageMedian.Dispose();
      HOperatorSet.MedianImage(ho_Image, out ho_ImageMedian, "circle", hv_MedianRadius, 
          "mirrored");
      ho_ImageSPMean.Dispose();
      HOperatorSet.MeanSp(ho_ImageMedian, out ho_ImageSPMean, hv_MeanSpMaskWidth, 
          hv_MeanSpMaskHeight, hv_MeanSpMinThreshold, hv_MeanSpMaxThreshold);
      ho_RegionDynThresh2.Dispose();
      HOperatorSet.DynThreshold(ho_ImageMedian, ho_ImageSPMean, out ho_RegionDynThresh2, 
          hv_DynOffset, hv_DynLightDark);
    }
    else
    {
      ho_ImageSPMean.Dispose();
      HOperatorSet.MeanSp(ho_Image, out ho_ImageSPMean, hv_MeanSpMaskWidth, hv_MeanSpMaskHeight, 
          hv_MeanSpMinThreshold, hv_MeanSpMaxThreshold);
      ho_RegionDynThresh2.Dispose();
      HOperatorSet.DynThreshold(ho_Image, ho_ImageSPMean, out ho_RegionDynThresh2, 
          hv_DynOffset, hv_DynLightDark);
    }

    ho_ConnectedRegions.Dispose();
    HOperatorSet.Connection(ho_RegionDynThresh2, out ho_ConnectedRegions);
    ho_FoundRegion.Dispose();
    HOperatorSet.MoveRegion(ho_ConnectedRegions, out ho_FoundRegion, 0, 0);
    ho_ImageMedian.Dispose();
    ho_ImageSPMean.Dispose();
    ho_RegionDynThresh2.Dispose();
    ho_ConnectedRegions.Dispose();

    return;
  }


}
#if !(NO_EXPORT_MAIN || NO_EXPORT_APP_MAIN)
public class HDevelopExportApp
{
  static void Main(string[] args)
  {
    new HDevelopExport();
  }
}
#endif

