//
//  File generated by HDevelop for HALCON/DOTNET (C#) Version 12.0
//

using HalconDotNet;

public partial class HDevelopExport
{
#if !(NO_EXPORT_MAIN || NO_EXPORT_APP_MAIN)
#endif

  // Procedures 
  public void GetBlobsByDynThresholdWithMeanExcluded (HObject ho_Image, out HObject ho_FoundRegion, 
      HTuple hv_MedianRadius, HTuple hv_DynMeanMaskWidth, HTuple hv_DynMeanMaskHeight, 
      HTuple hv_DynOffset, HTuple hv_DynLightDark)
  {




    // Local iconic variables 

    HObject ho_Domain, ho_ExpandedImage, ho_ImageMedian;
    HObject ho_ImageMean=null, ho_ImageMedianReduced, ho_ImageMeanReduced;
    HObject ho_DynRegion;

    // Local control variables 

    HTuple hv_Width = null, hv_Height = null, hv_Area = null;
    HTuple hv_ExpandRange = null, hv_Value = null, hv_MeanWidth = new HTuple();
    HTuple hv_MeanHeight = new HTuple();
    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_FoundRegion);
    HOperatorSet.GenEmptyObj(out ho_Domain);
    HOperatorSet.GenEmptyObj(out ho_ExpandedImage);
    HOperatorSet.GenEmptyObj(out ho_ImageMedian);
    HOperatorSet.GenEmptyObj(out ho_ImageMean);
    HOperatorSet.GenEmptyObj(out ho_ImageMedianReduced);
    HOperatorSet.GenEmptyObj(out ho_ImageMeanReduced);
    HOperatorSet.GenEmptyObj(out ho_DynRegion);
    ho_Domain.Dispose();
    HOperatorSet.GetDomain(ho_Image, out ho_Domain);
    HOperatorSet.RegionFeatures(ho_Domain, "width", out hv_Width);
    HOperatorSet.RegionFeatures(ho_Domain, "height", out hv_Height);
    HOperatorSet.RegionFeatures(ho_Domain, "area", out hv_Area);

    hv_ExpandRange = hv_MedianRadius+1;
    if ((int)(new HTuple(hv_DynMeanMaskWidth.TupleGreater(hv_MedianRadius))) != 0)
    {
      hv_ExpandRange = hv_DynMeanMaskWidth.Clone();
    }
    else if ((int)(new HTuple(hv_DynMeanMaskHeight.TupleGreater(hv_MedianRadius))) != 0)
    {
      hv_ExpandRange = hv_DynMeanMaskHeight.Clone();
    }
    hv_ExpandRange = hv_ExpandRange*2;

    ho_ExpandedImage.Dispose();
    HOperatorSet.ExpandDomainGray(ho_Image, out ho_ExpandedImage, hv_ExpandRange);

    ho_ImageMedian.Dispose();
    HOperatorSet.MedianImage(ho_ExpandedImage, out ho_ImageMedian, "circle", hv_MedianRadius, 
        "mirrored");

    HOperatorSet.GrayFeatures(ho_Domain, ho_ImageMedian, "mean", out hv_Value);

    if ((int)(new HTuple(hv_DynMeanMaskWidth.TupleGreater(0))) != 0)
    {
      hv_MeanWidth = hv_DynMeanMaskWidth.Clone();
    }
    else
    {
      hv_MeanWidth = hv_Width.Clone();
    }

    if ((int)(new HTuple(hv_DynMeanMaskHeight.TupleGreater(0))) != 0)
    {
      hv_MeanHeight = hv_DynMeanMaskHeight.Clone();
    }
    else
    {
      hv_MeanHeight = hv_Height.Clone();
    }

    if ((int)((new HTuple(hv_DynMeanMaskWidth.TupleGreater(0))).TupleOr(new HTuple(hv_DynMeanMaskHeight.TupleGreater(
        0)))) != 0)
    {
      ho_ImageMean.Dispose();
      HOperatorSet.MeanImage(ho_ImageMedian, out ho_ImageMean, hv_MeanWidth, hv_MeanHeight);
    }
    else if ((int)(new HTuple(hv_Area.TupleEqual(hv_Area))) != 0)
    {
      ho_ImageMean.Dispose();
      HOperatorSet.MeanImage(ho_ImageMedian, out ho_ImageMean, hv_MeanWidth, hv_MeanHeight);
    }
    else
    {
      ho_ImageMean.Dispose();
      HOperatorSet.RegionToMean(ho_Domain, ho_ImageMedian, out ho_ImageMean);
    }

    ho_ImageMedianReduced.Dispose();
    HOperatorSet.ReduceDomain(ho_ImageMedian, ho_Domain, out ho_ImageMedianReduced
        );
    ho_ImageMeanReduced.Dispose();
    HOperatorSet.ReduceDomain(ho_ImageMean, ho_Domain, out ho_ImageMeanReduced);

    ho_DynRegion.Dispose();
    HOperatorSet.DynThreshold(ho_ImageMedianReduced, ho_ImageMeanReduced, out ho_DynRegion, 
        hv_DynOffset, hv_DynLightDark);
    ho_FoundRegion.Dispose();
    HOperatorSet.Connection(ho_DynRegion, out ho_FoundRegion);
    ho_Domain.Dispose();
    ho_ExpandedImage.Dispose();
    ho_ImageMedian.Dispose();
    ho_ImageMean.Dispose();
    ho_ImageMedianReduced.Dispose();
    ho_ImageMeanReduced.Dispose();
    ho_DynRegion.Dispose();

    return;
  }


}
#if !(NO_EXPORT_MAIN || NO_EXPORT_APP_MAIN)
public class HDevelopExportApp
{
  static void Main(string[] args)
  {
    new HDevelopExport();
  }
}
#endif

