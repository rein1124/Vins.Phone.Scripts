//
//  File generated by HDevelop for HALCON/DOTNET (C#) Version 12.0
//

using HalconDotNet;

public partial class HDevelopExport
{
#if !(NO_EXPORT_MAIN || NO_EXPORT_APP_MAIN)
#endif

  // Procedures 
  public void GetRegionBySobelAmp (HObject ho_Image, out HObject ho_FoundRegion, 
      HTuple hv_MeanMaskWidth, HTuple hv_MeanMaskHeight, HTuple hv_EmpMaskWidth, HTuple hv_EmpMaskHeight, 
      HTuple hv_EmpFactor, HTuple hv_SobelAmpSize, HTuple hv_ScaleMult, HTuple hv_ScaleAdd, 
      HTuple hv_ThresholdMinGray, HTuple hv_ThresholdMaxGray, HTuple hv_ErosionRadius, 
      HTuple hv_ClosingCircleRadius, HTuple hv_ClosingRectWidth, HTuple hv_ClosingRectHeight, 
      HTuple hv_DilationRadius, HTuple hv_AreaMin, HTuple hv_AreaMax)
  {




    // Local iconic variables 

    HObject ho_ImageMean, ho_ImageEmphasize, ho_EdgeAmplitude;
    HObject ho_ImageScaleMax, ho_Areas, ho_RegionErosion, ho_ConnectedRegions1;
    HObject ho_RegionFillUp, ho_RegionClosing, ho_RegionClosing2;
    HObject ho_RegionDilation, ho_SelectedRegions;
    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_FoundRegion);
    HOperatorSet.GenEmptyObj(out ho_ImageMean);
    HOperatorSet.GenEmptyObj(out ho_ImageEmphasize);
    HOperatorSet.GenEmptyObj(out ho_EdgeAmplitude);
    HOperatorSet.GenEmptyObj(out ho_ImageScaleMax);
    HOperatorSet.GenEmptyObj(out ho_Areas);
    HOperatorSet.GenEmptyObj(out ho_RegionErosion);
    HOperatorSet.GenEmptyObj(out ho_ConnectedRegions1);
    HOperatorSet.GenEmptyObj(out ho_RegionFillUp);
    HOperatorSet.GenEmptyObj(out ho_RegionClosing);
    HOperatorSet.GenEmptyObj(out ho_RegionClosing2);
    HOperatorSet.GenEmptyObj(out ho_RegionDilation);
    HOperatorSet.GenEmptyObj(out ho_SelectedRegions);
    //extract and enhance edges
    ho_ImageMean.Dispose();
    HOperatorSet.MeanImage(ho_Image, out ho_ImageMean, hv_MeanMaskWidth, hv_MeanMaskHeight);
    ho_ImageEmphasize.Dispose();
    HOperatorSet.Emphasize(ho_ImageMean, out ho_ImageEmphasize, hv_EmpMaskWidth, 
        hv_EmpMaskHeight, hv_EmpFactor);
    ho_EdgeAmplitude.Dispose();
    HOperatorSet.SobelAmp(ho_ImageEmphasize, out ho_EdgeAmplitude, "sum_abs_binomial", 
        hv_SobelAmpSize);
    ho_ImageScaleMax.Dispose();
    HOperatorSet.ScaleImage(ho_EdgeAmplitude, out ho_ImageScaleMax, hv_ScaleMult, 
        hv_ScaleAdd);

    //extract regions
    ho_Areas.Dispose();
    HOperatorSet.Threshold(ho_ImageScaleMax, out ho_Areas, hv_ThresholdMinGray, hv_ThresholdMaxGray);
    ho_RegionErosion.Dispose();
    HOperatorSet.ErosionCircle(ho_Areas, out ho_RegionErosion, hv_ErosionRadius);
    ho_ConnectedRegions1.Dispose();
    HOperatorSet.Connection(ho_RegionErosion, out ho_ConnectedRegions1);
    ho_RegionFillUp.Dispose();
    HOperatorSet.FillUp(ho_ConnectedRegions1, out ho_RegionFillUp);
    ho_RegionClosing.Dispose();
    HOperatorSet.ClosingCircle(ho_RegionFillUp, out ho_RegionClosing, hv_ClosingCircleRadius);
    ho_RegionClosing2.Dispose();
    HOperatorSet.ClosingRectangle1(ho_RegionClosing, out ho_RegionClosing2, hv_ClosingRectWidth, 
        hv_ClosingRectHeight);
    ho_RegionDilation.Dispose();
    HOperatorSet.DilationCircle(ho_RegionClosing2, out ho_RegionDilation, hv_DilationRadius);

    //select region
    ho_SelectedRegions.Dispose();
    HOperatorSet.SelectShape(ho_RegionDilation, out ho_SelectedRegions, "area", "and", 
        hv_AreaMin, hv_AreaMax);
    ho_FoundRegion.Dispose();
    HOperatorSet.MoveRegion(ho_SelectedRegions, out ho_FoundRegion, 0, 0);

    ho_ImageMean.Dispose();
    ho_ImageEmphasize.Dispose();
    ho_EdgeAmplitude.Dispose();
    ho_ImageScaleMax.Dispose();
    ho_Areas.Dispose();
    ho_RegionErosion.Dispose();
    ho_ConnectedRegions1.Dispose();
    ho_RegionFillUp.Dispose();
    ho_RegionClosing.Dispose();
    ho_RegionClosing2.Dispose();
    ho_RegionDilation.Dispose();
    ho_SelectedRegions.Dispose();

    return;
  }


}
#if !(NO_EXPORT_MAIN || NO_EXPORT_APP_MAIN)
public class HDevelopExportApp
{
  static void Main(string[] args)
  {
    new HDevelopExport();
  }
}
#endif

