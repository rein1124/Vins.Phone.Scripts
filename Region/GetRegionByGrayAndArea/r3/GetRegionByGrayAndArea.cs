//
//  File generated by HDevelop for HALCON/DOTNET (C#) Version 12.0
//

using HalconDotNet;

public partial class HDevelopExport
{
#if !(NO_EXPORT_MAIN || NO_EXPORT_APP_MAIN)
  public HDevelopExport()
  {
    // Default settings used in HDevelop 
    HOperatorSet.SetSystem("width", 512);
    HOperatorSet.SetSystem("height", 512);
    if (HalconAPI.isWindows)
      HOperatorSet.SetSystem("use_window_thread","true");
    action();
  }
#endif

  // Procedures 
  // Local procedures 
  public void GetRegionByGrayAndArea (HObject ho_Image, out HObject ho_FoundRegion, 
      HTuple hv_MedianRadius, HTuple hv_EmpWidth, HTuple hv_EmpHeight, HTuple hv_EmpFactor, 
      HTuple hv_ThresholdMinGray, HTuple hv_ThresholdMaxGray, HTuple hv_AreaMin, HTuple hv_AreaMax, 
      HTuple hv_ClosingRadius, HTuple hv_DilationRadius)
  {




    // Local iconic variables 

    HObject ho_ImageMedian, ho_ImageEmphasize;
    HObject ho_Regions, ho_ConnectedRegions, ho_SelectedRegions;
    HObject ho_RegionFillUp, ho_RegionClosing, ho_RegionDilation;
    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_FoundRegion);
    HOperatorSet.GenEmptyObj(out ho_ImageMedian);
    HOperatorSet.GenEmptyObj(out ho_ImageEmphasize);
    HOperatorSet.GenEmptyObj(out ho_Regions);
    HOperatorSet.GenEmptyObj(out ho_ConnectedRegions);
    HOperatorSet.GenEmptyObj(out ho_SelectedRegions);
    HOperatorSet.GenEmptyObj(out ho_RegionFillUp);
    HOperatorSet.GenEmptyObj(out ho_RegionClosing);
    HOperatorSet.GenEmptyObj(out ho_RegionDilation);
    ho_ImageMedian.Dispose();
    HOperatorSet.MedianImage(ho_Image, out ho_ImageMedian, "circle", hv_MedianRadius, 
        "continued");
    ho_ImageEmphasize.Dispose();
    HOperatorSet.Emphasize(ho_ImageMedian, out ho_ImageEmphasize, hv_EmpWidth, hv_EmpHeight, 
        hv_EmpFactor);
    ho_Regions.Dispose();
    HOperatorSet.Threshold(ho_ImageEmphasize, out ho_Regions, hv_ThresholdMinGray, 
        hv_ThresholdMaxGray);
    ho_ConnectedRegions.Dispose();
    HOperatorSet.Connection(ho_Regions, out ho_ConnectedRegions);
    ho_SelectedRegions.Dispose();
    HOperatorSet.SelectShape(ho_ConnectedRegions, out ho_SelectedRegions, "area", 
        "and", hv_AreaMin, hv_AreaMax);
    ho_RegionFillUp.Dispose();
    HOperatorSet.FillUp(ho_SelectedRegions, out ho_RegionFillUp);
    ho_RegionClosing.Dispose();
    HOperatorSet.ClosingCircle(ho_RegionFillUp, out ho_RegionClosing, hv_ClosingRadius);
    ho_RegionDilation.Dispose();
    HOperatorSet.DilationCircle(ho_RegionClosing, out ho_RegionDilation, hv_DilationRadius);
    ho_FoundRegion.Dispose();
    HOperatorSet.MoveRegion(ho_RegionDilation, out ho_FoundRegion, 0, 0);

    ho_ImageMedian.Dispose();
    ho_ImageEmphasize.Dispose();
    ho_Regions.Dispose();
    ho_ConnectedRegions.Dispose();
    ho_SelectedRegions.Dispose();
    ho_RegionFillUp.Dispose();
    ho_RegionClosing.Dispose();
    ho_RegionDilation.Dispose();

    return;
  }

#if !NO_EXPORT_MAIN
  // Main procedure 
  private void action()
  {


    // Local iconic variables 

    HObject ho_Image, ho_Domain, ho_ImageReduced;
    HObject ho_FoundRegion, ho_RegionBorder;

    // Local control variables 

    HTuple hv_Width = null, hv_Height = null;
    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_Image);
    HOperatorSet.GenEmptyObj(out ho_Domain);
    HOperatorSet.GenEmptyObj(out ho_ImageReduced);
    HOperatorSet.GenEmptyObj(out ho_FoundRegion);
    HOperatorSet.GenEmptyObj(out ho_RegionBorder);
    if (HDevWindowStack.IsOpen())
    {
      HOperatorSet.SetDraw(HDevWindowStack.GetActive(), "margin");
    }

    ho_Image.Dispose();
    HOperatorSet.ReadImage(out ho_Image, "2014-12-24_22.27.49_B_Hole_Left-1.tif");
    HOperatorSet.GetImageSize(ho_Image, out hv_Width, out hv_Height);
    ho_Domain.Dispose();
    HOperatorSet.GetDomain(ho_Image, out ho_Domain);

    ho_ImageReduced.Dispose();
    HOperatorSet.ReduceDomain(ho_Image, ho_Domain, out ho_ImageReduced);

    ho_FoundRegion.Dispose();
    GetRegionByGrayAndArea(ho_ImageReduced, out ho_FoundRegion, 7, hv_Width, hv_Height, 
        3, 0, 180, 60000, 99999999, 5, 2);

    ho_RegionBorder.Dispose();
    HOperatorSet.Boundary(ho_FoundRegion, out ho_RegionBorder, "inner");
    // stop(); only in hdevelop

    ho_ImageReduced.Dispose();
    HOperatorSet.ReduceDomain(ho_Image, ho_FoundRegion, out ho_ImageReduced);
    // stop(); only in hdevelop
    ho_Image.Dispose();
    ho_Domain.Dispose();
    ho_ImageReduced.Dispose();
    ho_FoundRegion.Dispose();
    ho_RegionBorder.Dispose();

  }

#endif


}
#if !(NO_EXPORT_MAIN || NO_EXPORT_APP_MAIN)
public class HDevelopExportApp
{
  static void Main(string[] args)
  {
    new HDevelopExport();
  }
}
#endif

