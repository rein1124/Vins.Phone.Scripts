//
//  File generated by HDevelop for HALCON/DOTNET (C#) Version 11.0
//

using HalconDotNet;

public partial class HDevelopExport
{
#if !(NO_EXPORT_MAIN || NO_EXPORT_APP_MAIN)
  public HDevelopExport()
  {
    // Default settings used in HDevelop 
    HOperatorSet.SetSystem("width", 512);
    HOperatorSet.SetSystem("height", 512);
    action();
  }
#endif

  // Procedures 
  // Local procedures 
  public void DistanceOfLineToLine (HTuple hv_FirstLineStartPoint_Row, HTuple hv_FirstLineStartPoint_Column, 
      HTuple hv_FirstLineEndPoint_Row, HTuple hv_FirstLineEndPoint_Column, HTuple hv_SecondLineStartPoint_Row, 
      HTuple hv_SecondLineStartPoint_Column, HTuple hv_SecondLineEndPoint_Row, HTuple hv_SecondLineEndPoint_Column, 
      out HTuple hv_LineToLine_Distance, out HTuple hv_DistanceStartPoint_Row, out HTuple hv_DistanceStartPoint_Column, 
      out HTuple hv_DistanceEndPoint_Row, out HTuple hv_DistanceEndPoint_Column, out HTuple hv_DottedLinePoint_Row, 
      out HTuple hv_DottedLinePoint_Column, out HTuple hv_LineToLineAngle)
  {


    // Local control variables 

    HTuple hv_FirstLineCenterPoint_Row = null;
    HTuple hv_FirstLineCenterPoint_Column = null, hv_MiddleOfFirstLineToSecondLineRowProj = null;
    HTuple hv_MiddleOfFirstLineToSecondLineColProj = null;
    HTuple hv_Max_Column = new HTuple(), hv_Max_Column_Row = new HTuple();
    HTuple hv_Min_Column = new HTuple(), hv_Min_Column_Row = new HTuple();

    // Initialize local and output iconic variables 

    hv_DottedLinePoint_Row = new HTuple();
    hv_DottedLinePoint_Column = new HTuple();
    //center point
    hv_FirstLineCenterPoint_Row = 0.5*((hv_FirstLineStartPoint_Row.TupleSelect(0))+(hv_FirstLineEndPoint_Row.TupleSelect(
        0)));
    hv_FirstLineCenterPoint_Column = 0.5*((hv_FirstLineStartPoint_Column.TupleSelect(
        0))+(hv_FirstLineEndPoint_Column.TupleSelect(0)));
    //
    HOperatorSet.ProjectionPl(hv_FirstLineCenterPoint_Row.TupleSelect(0), hv_FirstLineCenterPoint_Column.TupleSelect(
        0), hv_SecondLineStartPoint_Row.TupleSelect(0), hv_SecondLineStartPoint_Column.TupleSelect(
        0), hv_SecondLineEndPoint_Row.TupleSelect(0), hv_SecondLineEndPoint_Column.TupleSelect(
        0), out hv_MiddleOfFirstLineToSecondLineRowProj, out hv_MiddleOfFirstLineToSecondLineColProj);
    //
    HOperatorSet.DistancePp(hv_FirstLineCenterPoint_Row.TupleSelect(0), hv_FirstLineCenterPoint_Column.TupleSelect(
        0), hv_MiddleOfFirstLineToSecondLineRowProj, hv_MiddleOfFirstLineToSecondLineColProj, 
        out hv_LineToLine_Distance);
    HOperatorSet.AngleLl(hv_FirstLineStartPoint_Row.TupleSelect(0), hv_FirstLineStartPoint_Column.TupleSelect(
        0), hv_FirstLineEndPoint_Row.TupleSelect(0), hv_FirstLineEndPoint_Column.TupleSelect(
        0), hv_SecondLineStartPoint_Row.TupleSelect(0), hv_SecondLineStartPoint_Column.TupleSelect(
        0), hv_SecondLineEndPoint_Row.TupleSelect(0), hv_SecondLineEndPoint_Column.TupleSelect(
        0), out hv_LineToLineAngle);
    hv_DistanceStartPoint_Row = hv_FirstLineCenterPoint_Row.Clone();
    hv_DistanceStartPoint_Column = hv_FirstLineCenterPoint_Column.Clone();
    hv_DistanceEndPoint_Row = hv_MiddleOfFirstLineToSecondLineRowProj.Clone();
    hv_DistanceEndPoint_Column = hv_MiddleOfFirstLineToSecondLineColProj.Clone();
    //
    if ((int)(new HTuple(hv_SecondLineStartPoint_Column.TupleEqual(hv_SecondLineEndPoint_Column))) != 0)
    {
      if ((int)(new HTuple(hv_SecondLineStartPoint_Row.TupleLess(hv_SecondLineEndPoint_Row))) != 0)
      {
        hv_Max_Column = hv_SecondLineEndPoint_Column.Clone();
        hv_Max_Column_Row = hv_SecondLineEndPoint_Row.Clone();
        hv_Min_Column = hv_SecondLineStartPoint_Column.Clone();
        hv_Min_Column_Row = hv_SecondLineStartPoint_Row.Clone();
      }
      else
      {
        hv_Max_Column = hv_SecondLineStartPoint_Column.Clone();
        hv_Max_Column_Row = hv_SecondLineStartPoint_Row.Clone();
        hv_Min_Column = hv_SecondLineEndPoint_Column.Clone();
        hv_Min_Column_Row = hv_SecondLineEndPoint_Row.Clone();
      }
      if ((int)(new HTuple(hv_MiddleOfFirstLineToSecondLineRowProj.TupleLess(hv_Min_Column_Row))) != 0)
      {
        hv_DottedLinePoint_Row = hv_Min_Column_Row.Clone();
        hv_DottedLinePoint_Column = hv_Min_Column.Clone();
      }
      else if ((int)(new HTuple(hv_MiddleOfFirstLineToSecondLineRowProj.TupleGreater(
          hv_Max_Column_Row))) != 0)
      {
        hv_DottedLinePoint_Row = hv_Max_Column_Row.Clone();
        hv_DottedLinePoint_Column = hv_Max_Column.Clone();
      }
      else
      {
        hv_DottedLinePoint_Row = hv_MiddleOfFirstLineToSecondLineRowProj.Clone();
        hv_DottedLinePoint_Column = hv_MiddleOfFirstLineToSecondLineColProj.Clone();
      }
    }
    else
    {
      if ((int)(new HTuple(hv_SecondLineStartPoint_Column.TupleLess(hv_SecondLineEndPoint_Column))) != 0)
      {
        hv_Max_Column = hv_SecondLineEndPoint_Column.Clone();
        hv_Max_Column_Row = hv_SecondLineEndPoint_Row.Clone();
        hv_Min_Column = hv_SecondLineStartPoint_Column.Clone();
        hv_Min_Column_Row = hv_SecondLineStartPoint_Row.Clone();
      }
      else
      {
        hv_Max_Column = hv_SecondLineStartPoint_Column.Clone();
        hv_Max_Column_Row = hv_SecondLineStartPoint_Row.Clone();
        hv_Min_Column = hv_SecondLineEndPoint_Column.Clone();
        hv_Min_Column_Row = hv_SecondLineEndPoint_Row.Clone();
      }
      if ((int)(new HTuple(hv_MiddleOfFirstLineToSecondLineColProj.TupleLess(hv_Min_Column))) != 0)
      {
        hv_DottedLinePoint_Row = hv_Min_Column_Row.Clone();
        hv_DottedLinePoint_Column = hv_Min_Column.Clone();
      }
      else if ((int)(new HTuple(hv_MiddleOfFirstLineToSecondLineColProj.TupleGreater(
          hv_Max_Column))) != 0)
      {
        hv_DottedLinePoint_Row = hv_Max_Column_Row.Clone();
        hv_DottedLinePoint_Column = hv_Max_Column.Clone();
      }
      else
      {
        hv_DottedLinePoint_Row = hv_MiddleOfFirstLineToSecondLineRowProj.Clone();
        hv_DottedLinePoint_Column = hv_MiddleOfFirstLineToSecondLineColProj.Clone();
      }
    }

    return;
  }

#if !NO_EXPORT_MAIN
  // Main procedure 
  private void action()
  {

    // Local control variables 

    HTuple hv_FirstLineStartPoint_Row = new HTuple();
    HTuple hv_FirstLineStartPoint_Column = new HTuple(), hv_FirstLineEndPoint_Row = new HTuple();
    HTuple hv_FirstLineEndPoint_Column = new HTuple(), hv_SecondLineStartPoint_Row = new HTuple();
    HTuple hv_SecondLineStartPoint_Column = new HTuple(), hv_SecondLineEndPoint_Row = new HTuple();
    HTuple hv_SecondLineEndPoint_Column = new HTuple(), hv_LineToLineDistance = null;
    HTuple hv_DistanceStartPoint_Row = null, hv_DistanceStartPoint_Column = null;
    HTuple hv_DistanceEndPoint_Row = null, hv_DistanceEndPoint_Column = null;
    HTuple hv_DottedLinePoint_Row = null, hv_DottedLinePoint_Column = null;
    HTuple hv_LineToLineAngle = null;

    // Initialize local and output iconic variables 

    DistanceOfLineToLine(hv_FirstLineStartPoint_Row, hv_FirstLineStartPoint_Column, 
        hv_FirstLineEndPoint_Row, hv_FirstLineEndPoint_Column, hv_SecondLineStartPoint_Row, 
        hv_SecondLineStartPoint_Column, hv_SecondLineEndPoint_Row, hv_SecondLineEndPoint_Column, 
        out hv_LineToLineDistance, out hv_DistanceStartPoint_Row, out hv_DistanceStartPoint_Column, 
        out hv_DistanceEndPoint_Row, out hv_DistanceEndPoint_Column, out hv_DottedLinePoint_Row, 
        out hv_DottedLinePoint_Column, out hv_LineToLineAngle);

  }

#endif


}
#if !(NO_EXPORT_MAIN || NO_EXPORT_APP_MAIN)
public class HDevelopExportApp
{
  static void Main(string[] args)
  {
    new HDevelopExport();
  }
}
#endif

