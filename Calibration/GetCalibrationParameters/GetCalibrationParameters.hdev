<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.0" halcon_version="11.0.3.4" cs="3708184223">
<procedure name="main">
<interface/>
<body>
<l>DescrFile:='caltab2014-10-16.descr'</l>
<l>TargetPicName:='C:/Users/Public/Documents/MVTec/HALCON-11.0/examples/images/temp/sample1016-02_14.png'</l>
<l>ImageDirectory:='C:/Users/Public/Documents/MVTec/HALCON-11.0/examples/images/temp2'</l>
<c></c>
<l>read_image(Image, TargetPicName)</l>
<c></c>
<l>get_image_size(Image, Width, Height)</l>
<c></c>
<l>Focus:=0.025</l>
<l>Sx:=0.0000074</l>
<l>Sy:=0.0000074</l>
<l>CameraType:='area_scan_division'</l>
<c></c>
<l>GetCalibrationParameters (DescrFile, ImageDirectory, Focus, Sx, Sy, Width, Height, CameraType, interCamera, PoseNewOrigin, distance)</l>
<c></c>
<c>*其中interCamera和PoseNewOrigin分别为相机的内外参</c>
<c></c>
<l>dev_display (Image)</l>
<c></c>
<c>*在第14行设置断点，可以在图形窗口中选取坐标，为第三步计算距离用</c>
<c></c>
<l>getcalibpic (Image, ImageCalibed, interCamera, PoseNewOrigin, distance)</l>
<c></c>
<c>*ImageCalibed为标定后图片，下面四行是原图两点的平面坐标</c>
<c></c>
<l>Row1:=560</l>
<l>Column1:=488</l>
<l>Row2:=1417</l>
<l>Column2:=495</l>
<l>CaltabThick:=0.00014</l>
<c></c>
<l>getdistance (Row1, Column1, Row2, Column2, interCamera, PoseNewOrigin, CaltabThick, \
             Realdistance)</l>
<c></c>
<c>*Realdistance在变量窗口中查看</c>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
<procedure name="GetCalibrationParameters">
<interface>
<ic>
<par name="DescrFile"/>
<par name="ImageDirectory"/>
<par name="Focus"/>
<par name="Sx"/>
<par name="Sy"/>
<par name="Width"/>
<par name="Height"/>
<par name="CameraType"/>
</ic>
<oc>
<par name="interCamera"/>
<par name="PoseNewOrigin"/>
<par name="distance"/>
</oc>
</interface>
<body>
<l>create_calib_data('calibration_object', 1, 1, CalibDataID)</l>
<c></c>
<l>if (Width=='area_scan_telecentric_division' or Width=='area_scan_telecentric_polynomial')</l>
<c>    </c>
<l>    startParam:=[0,Sx,Sy,Width/2,Height/2,Width,Height]</l>
<c>    </c>
<l>    set_calib_data_cam_param (CalibDataID, 0, CameraType, startParam)</l>
<c>    </c>
<l>else    </l>
<c></c>
<l>    startParam:=[Focus,0,Sx,Sy,Width/2,Height/2,Width,Height]</l>
<c>    </c>
<l>    set_calib_data_cam_param (CalibDataID, 0, CameraType, startParam)</l>
<c>    </c>
<l>endif</l>
<c></c>
<l>set_calib_data_calib_object(CalibDataID, 0, DescrFile)</l>
<c></c>
<l>list_image_files(ImageDirectory,'default',[], ImageFiles)</l>
<c></c>
<c></c>
<l>for n := 0 to |ImageFiles|-1 by 1</l>
<c>    </c>
<l>    read_image (Image, ImageFiles[n])</l>
<c>    </c>
<l>    find_caltab(Image, CaltabRegion, DescrFile, 3, 112, 5)</l>
<c>    </c>
<l>    find_marks_and_pose(Image, CaltabRegion, DescrFile, startParam, 128, 10, 18, 0.9, 15, 100, RCoord, CCoord, StartPose)</l>
<c>    </c>
<l>    set_calib_data_observ_points(CalibDataID, 0, 0, 1, RCoord, CCoord, 'all', StartPose)</l>
<c>    </c>
<l>endfor </l>
<c></c>
<c></c>
<l>calibrate_cameras(CalibDataID, Error)</l>
<c></c>
<l>get_calib_data(CalibDataID, 'camera', 0, 'params', interCamera)</l>
<c></c>
<l>get_calib_data(CalibDataID, 'calib_obj_pose', [0,1], 'pose', Pose)</l>
<c></c>
<l>cut:=int(Pose[5])</l>
<c></c>
<l>YX:=100</l>
<l>YY:=100</l>
<c></c>
<l>image_points_to_world_plane(interCamera,Pose,YY, YX, 1, X, Y)</l>
<c></c>
<l>image_points_to_world_plane(interCamera,Pose,YY+1, YX, 1, X1, Y1)</l>
<c></c>
<l>image_points_to_world_plane(interCamera,Pose,YY, YX+1, 1, X2, Y2)</l>
<c></c>
<l>distance_pp(Y, X, Y1, X1, Distance1)</l>
<c></c>
<l>distance_pp(Y, X, Y2, X2, Distance2)</l>
<c></c>
<l>distance:=(Distance1 + Distance2)/2</l>
<c></c>
<l>OffsetX:=CCoord[24]*distance</l>
<l>OffsetY:=RCoord[24]*distance</l>
<c></c>
<l>insert(Pose,Pose[5]-cut, 5, PoseR)</l>
<c></c>
<l>set_origin_pose(PoseR, -OffsetX, -OffsetY, 0, PoseNewOrigin)</l>
<c></c>
<l>return ()</l>
</body>
<docu id="GetCalibrationParameters">
<parameters>
<parameter id="CameraType"/>
<parameter id="DescrFile"/>
<parameter id="Focus"/>
<parameter id="Height"/>
<parameter id="ImageDirectory"/>
<parameter id="PoseNewOrigin"/>
<parameter id="Sx"/>
<parameter id="Sy"/>
<parameter id="Width"/>
<parameter id="distance"/>
<parameter id="interCamera"/>
</parameters>
</docu>
</procedure>
<procedure name="getcalibpic">
<interface>
<io>
<par name="Image"/>
</io>
<oo>
<par name="ImageCalibed"/>
</oo>
<ic>
<par name="interCamera"/>
<par name="PoseNewOrigin"/>
<par name="distance"/>
</ic>
</interface>
<body>
<l>get_image_size(Image, Width, Height)</l>
<c></c>
<l>image_to_world_plane(Image, ImageCalibed, interCamera, PoseNewOrigin, Width, Height, distance, 'bilinear')</l>
<c></c>
<c></c>
<l>return ()</l>
</body>
<docu id="getcalibpic">
<parameters>
<parameter id="Image"/>
<parameter id="ImageCalibed"/>
<parameter id="PoseNewOrigin"/>
<parameter id="distance"/>
<parameter id="interCamera"/>
</parameters>
</docu>
</procedure>
<procedure name="getdistance">
<interface>
<ic>
<par name="Row1"/>
<par name="Column1"/>
<par name="Row2"/>
<par name="Column2"/>
<par name="interCamera"/>
<par name="PoseNewOrigin"/>
<par name="CaltabThick"/>
</ic>
<oc>
<par name="Realdistance"/>
</oc>
</interface>
<body>
<l>set_origin_pose(PoseNewOrigin,0,0,CaltabThick,PoseNewOrigin2)</l>
<c></c>
<l>image_points_to_world_plane(interCamera,PoseNewOrigin2, Row1, Column1, 'm', X1, Y1)</l>
<c></c>
<l>image_points_to_world_plane(interCamera,PoseNewOrigin2, Row2, Column2, 'm', X2, Y2)</l>
<c></c>
<l>distance_pp(Y1, X1, Y2, X2, Realdistance)</l>
<c></c>
<l>return ()</l>
</body>
<docu id="getdistance">
<parameters>
<parameter id="CaltabThick"/>
<parameter id="Column1"/>
<parameter id="Column2"/>
<parameter id="PoseNewOrigin"/>
<parameter id="Realdistance"/>
<parameter id="Row1"/>
<parameter id="Row2"/>
<parameter id="interCamera"/>
</parameters>
</docu>
</procedure>
</hdevelop>
